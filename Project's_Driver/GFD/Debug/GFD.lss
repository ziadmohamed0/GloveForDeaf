
GFD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ee6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000f3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000f3a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002864  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a2b  00000000  00000000  0000395c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012d7  00000000  00000000  00004387  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  00005660  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006b5  00000000  00000000  000058c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f2e  00000000  00000000  00005f75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  00006ea3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 71 07 	jmp	0xee2	; 0xee2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 #include "../HALL/GFD/GDF_interface.h"


int main(void)
{
	GDF_PinDirectionInit();
  6c:	0e 94 40 02 	call	0x480	; 0x480 <GDF_PinDirectionInit>
	GDF_MainCode();
  70:	0e 94 7d 02 	call	0x4fa	; 0x4fa <GDF_MainCode>
  74:	ff cf       	rjmp	.-2      	; 0x74 <main+0x8>

00000076 <savingSentences>:


void savingSentences(void)
{
	//I Love You
	EEPROM_Write_Byte(0,'I');
  76:	69 e4       	ldi	r22, 0x49	; 73
  78:	70 e0       	ldi	r23, 0x00	; 0
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(1,' ');
  82:	60 e2       	ldi	r22, 0x20	; 32
  84:	70 e0       	ldi	r23, 0x00	; 0
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(2,'L');
  8e:	6c e4       	ldi	r22, 0x4C	; 76
  90:	70 e0       	ldi	r23, 0x00	; 0
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(3,'o');
  9a:	6f e6       	ldi	r22, 0x6F	; 111
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(4,'v');
  a6:	66 e7       	ldi	r22, 0x76	; 118
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(5,'e');
  b2:	65 e6       	ldi	r22, 0x65	; 101
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	85 e0       	ldi	r24, 0x05	; 5
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(6,' ');
  be:	60 e2       	ldi	r22, 0x20	; 32
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	86 e0       	ldi	r24, 0x06	; 6
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(7,'Y');
  ca:	69 e5       	ldi	r22, 0x59	; 89
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	87 e0       	ldi	r24, 0x07	; 7
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(8,'o');
  d6:	6f e6       	ldi	r22, 0x6F	; 111
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	88 e0       	ldi	r24, 0x08	; 8
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(9,'u');
  e2:	65 e7       	ldi	r22, 0x75	; 117
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	89 e0       	ldi	r24, 0x09	; 9
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	//Good Job
	EEPROM_Write_Byte(10,'G');
  ee:	67 e4       	ldi	r22, 0x47	; 71
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	8a e0       	ldi	r24, 0x0A	; 10
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(11,'o');
  fa:	6f e6       	ldi	r22, 0x6F	; 111
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	8b e0       	ldi	r24, 0x0B	; 11
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(12,'o');
 106:	6f e6       	ldi	r22, 0x6F	; 111
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(13,'d');
 112:	64 e6       	ldi	r22, 0x64	; 100
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	8d e0       	ldi	r24, 0x0D	; 13
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(14,' ');
 11e:	60 e2       	ldi	r22, 0x20	; 32
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	8e e0       	ldi	r24, 0x0E	; 14
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(15,'J');
 12a:	6a e4       	ldi	r22, 0x4A	; 74
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	8f e0       	ldi	r24, 0x0F	; 15
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(16,'o');
 136:	6f e6       	ldi	r22, 0x6F	; 111
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	80 e1       	ldi	r24, 0x10	; 16
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(17,'b');
 142:	62 e6       	ldi	r22, 0x62	; 98
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	81 e1       	ldi	r24, 0x11	; 17
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	//I watch you
	EEPROM_Write_Byte(18,'I');
 14e:	69 e4       	ldi	r22, 0x49	; 73
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	82 e1       	ldi	r24, 0x12	; 18
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(19,' ');
 15a:	60 e2       	ldi	r22, 0x20	; 32
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	83 e1       	ldi	r24, 0x13	; 19
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(20,'w');
 166:	67 e7       	ldi	r22, 0x77	; 119
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	84 e1       	ldi	r24, 0x14	; 20
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(21,'a');
 172:	61 e6       	ldi	r22, 0x61	; 97
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	85 e1       	ldi	r24, 0x15	; 21
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(22,'t');
 17e:	64 e7       	ldi	r22, 0x74	; 116
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	86 e1       	ldi	r24, 0x16	; 22
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(23,'c');
 18a:	63 e6       	ldi	r22, 0x63	; 99
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	87 e1       	ldi	r24, 0x17	; 23
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(24,'h');
 196:	68 e6       	ldi	r22, 0x68	; 104
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	88 e1       	ldi	r24, 0x18	; 24
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(25,' ');
 1a2:	60 e2       	ldi	r22, 0x20	; 32
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	89 e1       	ldi	r24, 0x19	; 25
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(26,'y');
 1ae:	69 e7       	ldi	r22, 0x79	; 121
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	8a e1       	ldi	r24, 0x1A	; 26
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(27,'o');
 1ba:	6f e6       	ldi	r22, 0x6F	; 111
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	8b e1       	ldi	r24, 0x1B	; 27
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(28,'u');
 1c6:	65 e7       	ldi	r22, 0x75	; 117
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	8c e1       	ldi	r24, 0x1C	; 28
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	//That is fantastic
	EEPROM_Write_Byte(29,'T');
 1d2:	64 e5       	ldi	r22, 0x54	; 84
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	8d e1       	ldi	r24, 0x1D	; 29
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(30,'h');
 1de:	68 e6       	ldi	r22, 0x68	; 104
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	8e e1       	ldi	r24, 0x1E	; 30
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(31,'a');
 1ea:	61 e6       	ldi	r22, 0x61	; 97
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	8f e1       	ldi	r24, 0x1F	; 31
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(32,'t');
 1f6:	64 e7       	ldi	r22, 0x74	; 116
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	80 e2       	ldi	r24, 0x20	; 32
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(33,' ');
 202:	60 e2       	ldi	r22, 0x20	; 32
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	81 e2       	ldi	r24, 0x21	; 33
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(34,'i');
 20e:	69 e6       	ldi	r22, 0x69	; 105
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	82 e2       	ldi	r24, 0x22	; 34
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(35,'s');
 21a:	63 e7       	ldi	r22, 0x73	; 115
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	83 e2       	ldi	r24, 0x23	; 35
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(36,' ');
 226:	60 e2       	ldi	r22, 0x20	; 32
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	84 e2       	ldi	r24, 0x24	; 36
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(37,'f');
 232:	66 e6       	ldi	r22, 0x66	; 102
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	85 e2       	ldi	r24, 0x25	; 37
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(38,'a');
 23e:	61 e6       	ldi	r22, 0x61	; 97
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	86 e2       	ldi	r24, 0x26	; 38
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(39,'n');
 24a:	6e e6       	ldi	r22, 0x6E	; 110
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	87 e2       	ldi	r24, 0x27	; 39
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(40,'t');
 256:	64 e7       	ldi	r22, 0x74	; 116
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	88 e2       	ldi	r24, 0x28	; 40
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(41,'a');
 262:	61 e6       	ldi	r22, 0x61	; 97
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	89 e2       	ldi	r24, 0x29	; 41
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(42,'s');
 26e:	63 e7       	ldi	r22, 0x73	; 115
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	8a e2       	ldi	r24, 0x2A	; 42
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(43,'t');
 27a:	64 e7       	ldi	r22, 0x74	; 116
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	8b e2       	ldi	r24, 0x2B	; 43
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(44,'i');
 286:	69 e6       	ldi	r22, 0x69	; 105
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	8c e2       	ldi	r24, 0x2C	; 44
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(45,'c');
 292:	63 e6       	ldi	r22, 0x63	; 99
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	8d e2       	ldi	r24, 0x2D	; 45
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	//I wish you good life
	EEPROM_Write_Byte(46,'I');
 29e:	69 e4       	ldi	r22, 0x49	; 73
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	8e e2       	ldi	r24, 0x2E	; 46
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(47,' ');
 2aa:	60 e2       	ldi	r22, 0x20	; 32
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	8f e2       	ldi	r24, 0x2F	; 47
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(48,'w');
 2b6:	67 e7       	ldi	r22, 0x77	; 119
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	80 e3       	ldi	r24, 0x30	; 48
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(49,'i');
 2c2:	69 e6       	ldi	r22, 0x69	; 105
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	81 e3       	ldi	r24, 0x31	; 49
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(50,'s');
 2ce:	63 e7       	ldi	r22, 0x73	; 115
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	82 e3       	ldi	r24, 0x32	; 50
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(51,'h');
 2da:	68 e6       	ldi	r22, 0x68	; 104
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	83 e3       	ldi	r24, 0x33	; 51
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(52,' ');
 2e6:	60 e2       	ldi	r22, 0x20	; 32
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	84 e3       	ldi	r24, 0x34	; 52
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(53,'y');
 2f2:	69 e7       	ldi	r22, 0x79	; 121
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	85 e3       	ldi	r24, 0x35	; 53
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(54,'o');
 2fe:	6f e6       	ldi	r22, 0x6F	; 111
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	86 e3       	ldi	r24, 0x36	; 54
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(55,'u');
 30a:	65 e7       	ldi	r22, 0x75	; 117
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	87 e3       	ldi	r24, 0x37	; 55
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(56,' ');
 316:	60 e2       	ldi	r22, 0x20	; 32
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	88 e3       	ldi	r24, 0x38	; 56
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(57,'g');
 322:	67 e6       	ldi	r22, 0x67	; 103
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	89 e3       	ldi	r24, 0x39	; 57
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(58,'o');
 32e:	6f e6       	ldi	r22, 0x6F	; 111
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	8a e3       	ldi	r24, 0x3A	; 58
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(59,'o');
 33a:	6f e6       	ldi	r22, 0x6F	; 111
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	8b e3       	ldi	r24, 0x3B	; 59
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(60,'d');
 346:	64 e6       	ldi	r22, 0x64	; 100
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	8c e3       	ldi	r24, 0x3C	; 60
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(61,' ');
 352:	60 e2       	ldi	r22, 0x20	; 32
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	8d e3       	ldi	r24, 0x3D	; 61
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(62,'l');
 35e:	6c e6       	ldi	r22, 0x6C	; 108
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	8e e3       	ldi	r24, 0x3E	; 62
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(63,'i');
 36a:	69 e6       	ldi	r22, 0x69	; 105
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	8f e3       	ldi	r24, 0x3F	; 63
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(64,'f');
 376:	66 e6       	ldi	r22, 0x66	; 102
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	80 e4       	ldi	r24, 0x40	; 64
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(65,'e');
 382:	65 e6       	ldi	r22, 0x65	; 101
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	81 e4       	ldi	r24, 0x41	; 65
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	//I really love you
	EEPROM_Write_Byte(66,'I');
 38e:	69 e4       	ldi	r22, 0x49	; 73
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	82 e4       	ldi	r24, 0x42	; 66
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(67,' ');
 39a:	60 e2       	ldi	r22, 0x20	; 32
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	83 e4       	ldi	r24, 0x43	; 67
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(68,'r');
 3a6:	62 e7       	ldi	r22, 0x72	; 114
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	84 e4       	ldi	r24, 0x44	; 68
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(69,'e');
 3b2:	65 e6       	ldi	r22, 0x65	; 101
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	85 e4       	ldi	r24, 0x45	; 69
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(70,'a');
 3be:	61 e6       	ldi	r22, 0x61	; 97
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	86 e4       	ldi	r24, 0x46	; 70
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(71,'l');
 3ca:	6c e6       	ldi	r22, 0x6C	; 108
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	87 e4       	ldi	r24, 0x47	; 71
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(72,'l');
 3d6:	6c e6       	ldi	r22, 0x6C	; 108
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	88 e4       	ldi	r24, 0x48	; 72
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(73,'y');
 3e2:	69 e7       	ldi	r22, 0x79	; 121
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	89 e4       	ldi	r24, 0x49	; 73
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(74,' ');
 3ee:	60 e2       	ldi	r22, 0x20	; 32
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	8a e4       	ldi	r24, 0x4A	; 74
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(75,'l');
 3fa:	6c e6       	ldi	r22, 0x6C	; 108
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	8b e4       	ldi	r24, 0x4B	; 75
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(76,'o');
 406:	6f e6       	ldi	r22, 0x6F	; 111
 408:	70 e0       	ldi	r23, 0x00	; 0
 40a:	8c e4       	ldi	r24, 0x4C	; 76
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(77,'v');
 412:	66 e7       	ldi	r22, 0x76	; 118
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	8d e4       	ldi	r24, 0x4D	; 77
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(78,'e');
 41e:	65 e6       	ldi	r22, 0x65	; 101
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	8e e4       	ldi	r24, 0x4E	; 78
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(79,' ');
 42a:	60 e2       	ldi	r22, 0x20	; 32
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	8f e4       	ldi	r24, 0x4F	; 79
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(80,'y');
 436:	69 e7       	ldi	r22, 0x79	; 121
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	80 e5       	ldi	r24, 0x50	; 80
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(81,'o');
 442:	6f e6       	ldi	r22, 0x6F	; 111
 444:	70 e0       	ldi	r23, 0x00	; 0
 446:	81 e5       	ldi	r24, 0x51	; 81
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(82,'u');
 44e:	65 e7       	ldi	r22, 0x75	; 117
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	82 e5       	ldi	r24, 0x52	; 82
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	//You
	EEPROM_Write_Byte(83,'Y');
 45a:	69 e5       	ldi	r22, 0x59	; 89
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	83 e5       	ldi	r24, 0x53	; 83
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(84,'o');
 466:	6f e6       	ldi	r22, 0x6F	; 111
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	84 e5       	ldi	r24, 0x54	; 84
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(85,'u');
 472:	65 e7       	ldi	r22, 0x75	; 117
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	85 e5       	ldi	r24, 0x55	; 85
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 4b 07 	call	0xe96	; 0xe96 <EEPROM_Write_Byte>
 47e:	08 95       	ret

00000480 <GDF_PinDirectionInit>:


void GDF_PinDirectionInit(void)
{
	                 /*  ADC CHANNELS PINS */
	DIO_setPinDirection( DIO_PORTA , DIO_PIN0 , DIO_PIN_INPUT );//Channel 0
 480:	40 e0       	ldi	r20, 0x00	; 0
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_setPinDirection>
	DIO_setPinDirection( DIO_PORTA , DIO_PIN1 , DIO_PIN_INPUT );//Channel 1
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_setPinDirection>
	DIO_setPinDirection( DIO_PORTA , DIO_PIN2 , DIO_PIN_INPUT );//Channel 2
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	62 e0       	ldi	r22, 0x02	; 2
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_setPinDirection>
	DIO_setPinDirection( DIO_PORTA , DIO_PIN3 , DIO_PIN_INPUT );//Channel 3
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	63 e0       	ldi	r22, 0x03	; 3
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_setPinDirection>
    DIO_setPinDirection( DIO_PORTA , DIO_PIN4 , DIO_PIN_INPUT );//Channel 4
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	64 e0       	ldi	r22, 0x04	; 4
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_setPinDirection>

                       /*     LCD PINS      */
    DIO_setPinDirection(DIO_PORTC,DIO_PIN4,DIO_PIN_OUTPUT);
 4b2:	41 e0       	ldi	r20, 0x01	; 1
 4b4:	64 e0       	ldi	r22, 0x04	; 4
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTC,DIO_PIN5,DIO_PIN_OUTPUT);
 4bc:	41 e0       	ldi	r20, 0x01	; 1
 4be:	65 e0       	ldi	r22, 0x05	; 5
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTC,DIO_PIN6,DIO_PIN_OUTPUT);
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	66 e0       	ldi	r22, 0x06	; 6
 4ca:	82 e0       	ldi	r24, 0x02	; 2
 4cc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_OUTPUT);
 4d0:	41 e0       	ldi	r20, 0x01	; 1
 4d2:	67 e0       	ldi	r22, 0x07	; 7
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 4da:	41 e0       	ldi	r20, 0x01	; 1
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 4e4:	41 e0       	ldi	r20, 0x01	; 1
 4e6:	62 e0       	ldi	r22, 0x02	; 2
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 4ee:	41 e0       	ldi	r20, 0x01	; 1
 4f0:	63 e0       	ldi	r22, 0x03	; 3
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_setPinDirection>
 4f8:	08 95       	ret

000004fa <GDF_MainCode>:
	 
}

void GDF_MainCode(void)
{
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
 502:	a7 97       	sbiw	r28, 0x27	; 39
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	f8 94       	cli
 508:	de bf       	out	0x3e, r29	; 62
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	cd bf       	out	0x3d, r28	; 61
	u16 Analog_Thumb
	 ,  Analog_Index_Finger
	 ,  Analog_Middle_Finger
	 ,  Analog_Ring_Finger
	 ,  Analog_Little_Finger ;
	savingSentences();  
 50e:	0e 94 3b 00 	call	0x76	; 0x76 <savingSentences>
	ADC_init(); // Initializing ADC 
 512:	0e 94 2d 06 	call	0xc5a	; 0xc5a <ADC_init>
	LCD_init(); // Initializing LCD
 516:	0e 94 2a 05 	call	0xa54	; 0xa54 <LCD_init>
	while (1)
	{ 
		                    /* Value of THIMB */
		ADC_getDigitalValue( ADC_SINGLE_ENDED_CHANNEL_0 , &Digital_Thumb         );
 51a:	be 01       	movw	r22, r28
 51c:	6f 5f       	subi	r22, 0xFF	; 255
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	0e 94 46 06 	call	0xc8c	; 0xc8c <ADC_getDigitalValue>
		Analog_Thumb = (( (u32)Digital_Thumb * 5000UL )/1024 );//digital * stepsize ( 5v->5000mv  )
 526:	29 81       	ldd	r18, Y+1	; 0x01
 528:	3a 81       	ldd	r19, Y+2	; 0x02
 52a:	a8 e8       	ldi	r26, 0x88	; 136
 52c:	b3 e1       	ldi	r27, 0x13	; 19
 52e:	0e 94 62 07 	call	0xec4	; 0xec4 <__umulhisi3>
 532:	6b 01       	movw	r12, r22
 534:	7c 01       	movw	r14, r24
 536:	0b 2e       	mov	r0, r27
 538:	ba e0       	ldi	r27, 0x0A	; 10
 53a:	f6 94       	lsr	r15
 53c:	e7 94       	ror	r14
 53e:	d7 94       	ror	r13
 540:	c7 94       	ror	r12
 542:	ba 95       	dec	r27
 544:	d1 f7       	brne	.-12     	; 0x53a <GDF_MainCode+0x40>
 546:	b0 2d       	mov	r27, r0
 548:	86 01       	movw	r16, r12
		                   /* Value of INDEX Finger */
		ADC_getDigitalValue( ADC_SINGLE_ENDED_CHANNEL_1 , &Digital_Index_Finger  );
 54a:	be 01       	movw	r22, r28
 54c:	6d 5f       	subi	r22, 0xFD	; 253
 54e:	7f 4f       	sbci	r23, 0xFF	; 255
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	0e 94 46 06 	call	0xc8c	; 0xc8c <ADC_getDigitalValue>
		Analog_Index_Finger = (( (u32) Digital_Index_Finger * 5000UL )/1024 );//digital * stepsize ( 5v->5000mv  )
 556:	2b 81       	ldd	r18, Y+3	; 0x03
 558:	3c 81       	ldd	r19, Y+4	; 0x04
 55a:	a8 e8       	ldi	r26, 0x88	; 136
 55c:	b3 e1       	ldi	r27, 0x13	; 19
 55e:	0e 94 62 07 	call	0xec4	; 0xec4 <__umulhisi3>
 562:	4b 01       	movw	r8, r22
 564:	5c 01       	movw	r10, r24
 566:	07 2e       	mov	r0, r23
 568:	7a e0       	ldi	r23, 0x0A	; 10
 56a:	b6 94       	lsr	r11
 56c:	a7 94       	ror	r10
 56e:	97 94       	ror	r9
 570:	87 94       	ror	r8
 572:	7a 95       	dec	r23
 574:	d1 f7       	brne	.-12     	; 0x56a <GDF_MainCode+0x70>
 576:	70 2d       	mov	r23, r0
 578:	14 01       	movw	r2, r8
		                    /* Value of MIDDLE Finger */
		ADC_getDigitalValue( ADC_SINGLE_ENDED_CHANNEL_2 , &Digital_Middle_Finger );
 57a:	be 01       	movw	r22, r28
 57c:	6b 5f       	subi	r22, 0xFB	; 251
 57e:	7f 4f       	sbci	r23, 0xFF	; 255
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	0e 94 46 06 	call	0xc8c	; 0xc8c <ADC_getDigitalValue>
		Analog_Middle_Finger = (( (u32)Digital_Middle_Finger * 5000UL )/1024 );//digital * stepsize ( 5v->5000mv  )
 586:	2d 81       	ldd	r18, Y+5	; 0x05
 588:	3e 81       	ldd	r19, Y+6	; 0x06
 58a:	a8 e8       	ldi	r26, 0x88	; 136
 58c:	b3 e1       	ldi	r27, 0x13	; 19
 58e:	0e 94 62 07 	call	0xec4	; 0xec4 <__umulhisi3>
 592:	2b 01       	movw	r4, r22
 594:	3c 01       	movw	r6, r24
 596:	03 2e       	mov	r0, r19
 598:	3a e0       	ldi	r19, 0x0A	; 10
 59a:	76 94       	lsr	r7
 59c:	67 94       	ror	r6
 59e:	57 94       	ror	r5
 5a0:	47 94       	ror	r4
 5a2:	3a 95       	dec	r19
 5a4:	d1 f7       	brne	.-12     	; 0x59a <GDF_MainCode+0xa0>
 5a6:	30 2d       	mov	r19, r0
 5a8:	5d a2       	std	Y+37, r5	; 0x25
 5aa:	4c a2       	std	Y+36, r4	; 0x24
		                    /* Value of RING Finger */
		ADC_getDigitalValue( ADC_SINGLE_ENDED_CHANNEL_3 , &Digital_Ring_Finger   );
 5ac:	be 01       	movw	r22, r28
 5ae:	69 5f       	subi	r22, 0xF9	; 249
 5b0:	7f 4f       	sbci	r23, 0xFF	; 255
 5b2:	83 e0       	ldi	r24, 0x03	; 3
 5b4:	0e 94 46 06 	call	0xc8c	; 0xc8c <ADC_getDigitalValue>
		Analog_Ring_Finger = (( (u32)Digital_Ring_Finger * 5000UL )/1024 );//digital * stepsize ( 5v->5000mv  )
 5b8:	2f 81       	ldd	r18, Y+7	; 0x07
 5ba:	38 85       	ldd	r19, Y+8	; 0x08
 5bc:	a8 e8       	ldi	r26, 0x88	; 136
 5be:	b3 e1       	ldi	r27, 0x13	; 19
 5c0:	0e 94 62 07 	call	0xec4	; 0xec4 <__umulhisi3>
 5c4:	9b 01       	movw	r18, r22
 5c6:	ac 01       	movw	r20, r24
 5c8:	01 2e       	mov	r0, r17
 5ca:	1a e0       	ldi	r17, 0x0A	; 10
 5cc:	56 95       	lsr	r21
 5ce:	47 95       	ror	r20
 5d0:	37 95       	ror	r19
 5d2:	27 95       	ror	r18
 5d4:	1a 95       	dec	r17
 5d6:	d1 f7       	brne	.-12     	; 0x5cc <GDF_MainCode+0xd2>
 5d8:	10 2d       	mov	r17, r0
 5da:	28 a3       	std	Y+32, r18	; 0x20
 5dc:	39 a3       	std	Y+33, r19	; 0x21
 5de:	4a a3       	std	Y+34, r20	; 0x22
 5e0:	5b a3       	std	Y+35, r21	; 0x23
 5e2:	48 a1       	ldd	r20, Y+32	; 0x20
 5e4:	59 a1       	ldd	r21, Y+33	; 0x21
 5e6:	5f a3       	std	Y+39, r21	; 0x27
 5e8:	4e a3       	std	Y+38, r20	; 0x26
		                    /* Value of LITTLE Finger */
		ADC_getDigitalValue( ADC_SINGLE_ENDED_CHANNEL_4 , &Digital_Little_Finger );
 5ea:	be 01       	movw	r22, r28
 5ec:	67 5f       	subi	r22, 0xF7	; 247
 5ee:	7f 4f       	sbci	r23, 0xFF	; 255
 5f0:	84 e0       	ldi	r24, 0x04	; 4
 5f2:	0e 94 46 06 	call	0xc8c	; 0xc8c <ADC_getDigitalValue>
		Analog_Little_Finger = (( (u32)Digital_Little_Finger * 5000UL )/1024 );//digital * stepsize ( 5v->5000mv  )
 5f6:	29 85       	ldd	r18, Y+9	; 0x09
 5f8:	3a 85       	ldd	r19, Y+10	; 0x0a
 5fa:	a8 e8       	ldi	r26, 0x88	; 136
 5fc:	b3 e1       	ldi	r27, 0x13	; 19
 5fe:	0e 94 62 07 	call	0xec4	; 0xec4 <__umulhisi3>
 602:	ab 01       	movw	r20, r22
 604:	bc 01       	movw	r22, r24
 606:	03 2e       	mov	r0, r19
 608:	3a e0       	ldi	r19, 0x0A	; 10
 60a:	76 95       	lsr	r23
 60c:	67 95       	ror	r22
 60e:	57 95       	ror	r21
 610:	47 95       	ror	r20
 612:	3a 95       	dec	r19
 614:	d1 f7       	brne	.-12     	; 0x60a <GDF_MainCode+0x110>
 616:	30 2d       	mov	r19, r0
 618:	9a 01       	movw	r18, r20
		
		if (  (Analog_Thumb < 625  ) && (Analog_Index_Finger < 625  ) && (Analog_Middle_Finger < 625 )  &&  ( Analog_Ring_Finger  < 625 )  &&  ( Analog_Little_Finger < 625 )   )//All fingers Flat
 61a:	81 e7       	ldi	r24, 0x71	; 113
 61c:	c8 16       	cp	r12, r24
 61e:	82 e0       	ldi	r24, 0x02	; 2
 620:	d8 06       	cpc	r13, r24
 622:	b8 f5       	brcc	.+110    	; 0x692 <GDF_MainCode+0x198>
 624:	91 e7       	ldi	r25, 0x71	; 113
 626:	89 16       	cp	r8, r25
 628:	92 e0       	ldi	r25, 0x02	; 2
 62a:	99 06       	cpc	r9, r25
 62c:	90 f5       	brcc	.+100    	; 0x692 <GDF_MainCode+0x198>
 62e:	8c a1       	ldd	r24, Y+36	; 0x24
 630:	9d a1       	ldd	r25, Y+37	; 0x25
 632:	81 37       	cpi	r24, 0x71	; 113
 634:	92 40       	sbci	r25, 0x02	; 2
 636:	68 f5       	brcc	.+90     	; 0x692 <GDF_MainCode+0x198>
 638:	8e a1       	ldd	r24, Y+38	; 0x26
 63a:	9f a1       	ldd	r25, Y+39	; 0x27
 63c:	81 37       	cpi	r24, 0x71	; 113
 63e:	92 40       	sbci	r25, 0x02	; 2
 640:	40 f5       	brcc	.+80     	; 0x692 <GDF_MainCode+0x198>
 642:	41 37       	cpi	r20, 0x71	; 113
 644:	82 e0       	ldi	r24, 0x02	; 2
 646:	58 07       	cpc	r21, r24
 648:	20 f5       	brcc	.+72     	; 0x692 <GDF_MainCode+0x198>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 64a:	9f ef       	ldi	r25, 0xFF	; 255
 64c:	e3 ed       	ldi	r30, 0xD3	; 211
 64e:	20 e3       	ldi	r18, 0x30	; 48
 650:	91 50       	subi	r25, 0x01	; 1
 652:	e0 40       	sbci	r30, 0x00	; 0
 654:	20 40       	sbci	r18, 0x00	; 0
 656:	e1 f7       	brne	.-8      	; 0x650 <GDF_MainCode+0x156>
 658:	00 c0       	rjmp	.+0      	; 0x65a <GDF_MainCode+0x160>
 65a:	00 00       	nop
		{  
			 _delay_ms(1000);
			LCD_clear(); //Clear LCD 
 65c:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_clear>
			//SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD " I wish you a good life " 
			u8 st[21];
			st[20] = '\0';
 660:	1f 8e       	std	Y+31, r1	; 0x1f
			for(u8 i = 0; i <= 19; i++)
 662:	f1 2c       	mov	r15, r1
 664:	0e c0       	rjmp	.+28     	; 0x682 <GDF_MainCode+0x188>
			{
				st[i] = EEPROM_Read_Byte(i+46);
 666:	0f 2d       	mov	r16, r15
 668:	10 e0       	ldi	r17, 0x00	; 0
 66a:	c8 01       	movw	r24, r16
 66c:	8e 96       	adiw	r24, 0x2e	; 46
 66e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <EEPROM_Read_Byte>
 672:	eb e0       	ldi	r30, 0x0B	; 11
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	ec 0f       	add	r30, r28
 678:	fd 1f       	adc	r31, r29
 67a:	e0 0f       	add	r30, r16
 67c:	f1 1f       	adc	r31, r17
 67e:	80 83       	st	Z, r24
			 _delay_ms(1000);
			LCD_clear(); //Clear LCD 
			//SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD " I wish you a good life " 
			u8 st[21];
			st[20] = '\0';
			for(u8 i = 0; i <= 19; i++)
 680:	f3 94       	inc	r15
 682:	33 e1       	ldi	r19, 0x13	; 19
 684:	3f 15       	cp	r19, r15
 686:	78 f7       	brcc	.-34     	; 0x666 <GDF_MainCode+0x16c>
			{
				st[i] = EEPROM_Read_Byte(i+46);
			};
			
			LCD_display(st); //I wish you good life
 688:	ce 01       	movw	r24, r28
 68a:	0b 96       	adiw	r24, 0x0b	; 11
 68c:	0e 94 b1 05 	call	0xb62	; 0xb62 <LCD_display>
		                    /* Value of LITTLE Finger */
		ADC_getDigitalValue( ADC_SINGLE_ENDED_CHANNEL_4 , &Digital_Little_Finger );
		Analog_Little_Finger = (( (u32)Digital_Little_Finger * 5000UL )/1024 );//digital * stepsize ( 5v->5000mv  )
		
		if (  (Analog_Thumb < 625  ) && (Analog_Index_Finger < 625  ) && (Analog_Middle_Finger < 625 )  &&  ( Analog_Ring_Finger  < 625 )  &&  ( Analog_Little_Finger < 625 )   )//All fingers Flat
		{  
 690:	44 cf       	rjmp	.-376    	; 0x51a <GDF_MainCode+0x20>
			};
			
			LCD_display(st); //I wish you good life
			
		}
		else if (  (Analog_Thumb < 625 ) && (Analog_Index_Finger < 625 ) && ( (3125 < Analog_Middle_Finger ) && (Analog_Middle_Finger < 5000 ) ) &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) ) &&  ( Analog_Little_Finger < 625 )   )//All fingers flat except middle and ring are totally bended
 692:	01 37       	cpi	r16, 0x71	; 113
 694:	82 e0       	ldi	r24, 0x02	; 2
 696:	18 07       	cpc	r17, r24
 698:	c8 f5       	brcc	.+114    	; 0x70c <GDF_MainCode+0x212>
 69a:	91 e7       	ldi	r25, 0x71	; 113
 69c:	29 16       	cp	r2, r25
 69e:	92 e0       	ldi	r25, 0x02	; 2
 6a0:	39 06       	cpc	r3, r25
 6a2:	a0 f5       	brcc	.+104    	; 0x70c <GDF_MainCode+0x212>
 6a4:	c2 01       	movw	r24, r4
 6a6:	86 53       	subi	r24, 0x36	; 54
 6a8:	9c 40       	sbci	r25, 0x0C	; 12
 6aa:	82 35       	cpi	r24, 0x52	; 82
 6ac:	97 40       	sbci	r25, 0x07	; 7
 6ae:	70 f5       	brcc	.+92     	; 0x70c <GDF_MainCode+0x212>
 6b0:	88 a1       	ldd	r24, Y+32	; 0x20
 6b2:	99 a1       	ldd	r25, Y+33	; 0x21
 6b4:	86 53       	subi	r24, 0x36	; 54
 6b6:	9c 40       	sbci	r25, 0x0C	; 12
 6b8:	82 35       	cpi	r24, 0x52	; 82
 6ba:	97 40       	sbci	r25, 0x07	; 7
 6bc:	38 f5       	brcc	.+78     	; 0x70c <GDF_MainCode+0x212>
 6be:	21 37       	cpi	r18, 0x71	; 113
 6c0:	82 e0       	ldi	r24, 0x02	; 2
 6c2:	38 07       	cpc	r19, r24
 6c4:	18 f5       	brcc	.+70     	; 0x70c <GDF_MainCode+0x212>
 6c6:	9f ef       	ldi	r25, 0xFF	; 255
 6c8:	e3 ed       	ldi	r30, 0xD3	; 211
 6ca:	20 e3       	ldi	r18, 0x30	; 48
 6cc:	91 50       	subi	r25, 0x01	; 1
 6ce:	e0 40       	sbci	r30, 0x00	; 0
 6d0:	20 40       	sbci	r18, 0x00	; 0
 6d2:	e1 f7       	brne	.-8      	; 0x6cc <GDF_MainCode+0x1d2>
 6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <GDF_MainCode+0x1dc>
 6d6:	00 00       	nop
		{
			_delay_ms(1000);
			LCD_clear();//Clear LCD
 6d8:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_clear>
			
			//SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD "I love you "
			
			u8 st[11];
			st[10] = '\0';
 6dc:	1d 8a       	std	Y+21, r1	; 0x15
			for(u8 i = 0; i <= 9; i++)
 6de:	f1 2c       	mov	r15, r1
 6e0:	0d c0       	rjmp	.+26     	; 0x6fc <GDF_MainCode+0x202>
			{
				st[i] = EEPROM_Read_Byte(i);
 6e2:	0f 2d       	mov	r16, r15
 6e4:	10 e0       	ldi	r17, 0x00	; 0
 6e6:	c8 01       	movw	r24, r16
 6e8:	0e 94 58 07 	call	0xeb0	; 0xeb0 <EEPROM_Read_Byte>
 6ec:	eb e0       	ldi	r30, 0x0B	; 11
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	ec 0f       	add	r30, r28
 6f2:	fd 1f       	adc	r31, r29
 6f4:	e0 0f       	add	r30, r16
 6f6:	f1 1f       	adc	r31, r17
 6f8:	80 83       	st	Z, r24
			
			//SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD "I love you "
			
			u8 st[11];
			st[10] = '\0';
			for(u8 i = 0; i <= 9; i++)
 6fa:	f3 94       	inc	r15
 6fc:	39 e0       	ldi	r19, 0x09	; 9
 6fe:	3f 15       	cp	r19, r15
 700:	80 f7       	brcc	.-32     	; 0x6e2 <GDF_MainCode+0x1e8>
			{
				st[i] = EEPROM_Read_Byte(i);
			};
			
			LCD_display(st); //I love you
 702:	ce 01       	movw	r24, r28
 704:	0b 96       	adiw	r24, 0x0b	; 11
 706:	0e 94 b1 05 	call	0xb62	; 0xb62 <LCD_display>
			
			LCD_display(st); //I wish you good life
			
		}
		else if (  (Analog_Thumb < 625 ) && (Analog_Index_Finger < 625 ) && ( (3125 < Analog_Middle_Finger ) && (Analog_Middle_Finger < 5000 ) ) &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) ) &&  ( Analog_Little_Finger < 625 )   )//All fingers flat except middle and ring are totally bended
		{
 70a:	07 cf       	rjmp	.-498    	; 0x51a <GDF_MainCode+0x20>
			};
			
			LCD_display(st); //I love you

		}
		else if ( ( ( 3125 < Analog_Thumb )&& (Analog_Thumb < 5000 ) ) && (Analog_Index_Finger < 625 ) && ( (3125 < Analog_Middle_Finger ) && (Analog_Middle_Finger < 5000 ) )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  &&  ( Analog_Little_Finger < 625 )   )////All fingers flat except middle, ring and thumb are totally bended
 70c:	86 e3       	ldi	r24, 0x36	; 54
 70e:	c8 1a       	sub	r12, r24
 710:	8c e0       	ldi	r24, 0x0C	; 12
 712:	d8 0a       	sbc	r13, r24
 714:	92 e5       	ldi	r25, 0x52	; 82
 716:	c9 16       	cp	r12, r25
 718:	97 e0       	ldi	r25, 0x07	; 7
 71a:	d9 06       	cpc	r13, r25
 71c:	d0 f5       	brcc	.+116    	; 0x792 <GDF_MainCode+0x298>
 71e:	e1 e7       	ldi	r30, 0x71	; 113
 720:	2e 16       	cp	r2, r30
 722:	e2 e0       	ldi	r30, 0x02	; 2
 724:	3e 06       	cpc	r3, r30
 726:	a8 f5       	brcc	.+106    	; 0x792 <GDF_MainCode+0x298>
 728:	c2 01       	movw	r24, r4
 72a:	86 53       	subi	r24, 0x36	; 54
 72c:	9c 40       	sbci	r25, 0x0C	; 12
 72e:	82 35       	cpi	r24, 0x52	; 82
 730:	97 40       	sbci	r25, 0x07	; 7
 732:	78 f5       	brcc	.+94     	; 0x792 <GDF_MainCode+0x298>
 734:	88 a1       	ldd	r24, Y+32	; 0x20
 736:	99 a1       	ldd	r25, Y+33	; 0x21
 738:	86 53       	subi	r24, 0x36	; 54
 73a:	9c 40       	sbci	r25, 0x0C	; 12
 73c:	82 35       	cpi	r24, 0x52	; 82
 73e:	97 40       	sbci	r25, 0x07	; 7
 740:	40 f5       	brcc	.+80     	; 0x792 <GDF_MainCode+0x298>
 742:	21 37       	cpi	r18, 0x71	; 113
 744:	82 e0       	ldi	r24, 0x02	; 2
 746:	38 07       	cpc	r19, r24
 748:	20 f5       	brcc	.+72     	; 0x792 <GDF_MainCode+0x298>
 74a:	9f ef       	ldi	r25, 0xFF	; 255
 74c:	e3 ed       	ldi	r30, 0xD3	; 211
 74e:	20 e3       	ldi	r18, 0x30	; 48
 750:	91 50       	subi	r25, 0x01	; 1
 752:	e0 40       	sbci	r30, 0x00	; 0
 754:	20 40       	sbci	r18, 0x00	; 0
 756:	e1 f7       	brne	.-8      	; 0x750 <GDF_MainCode+0x256>
 758:	00 c0       	rjmp	.+0      	; 0x75a <GDF_MainCode+0x260>
 75a:	00 00       	nop
		{   
			
			 _delay_ms(1000);
			LCD_clear();//Clear LCD
 75c:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_clear>
			//SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD "This is fantastic "
			 u8 st[18];
			 st[17] = '\0';
 760:	1c 8e       	std	Y+28, r1	; 0x1c
			 for(u8 i = 0; i <= 16; i++)
 762:	f1 2c       	mov	r15, r1
 764:	0e c0       	rjmp	.+28     	; 0x782 <GDF_MainCode+0x288>
			 {
				 st[i] = EEPROM_Read_Byte(i+29);
 766:	0f 2d       	mov	r16, r15
 768:	10 e0       	ldi	r17, 0x00	; 0
 76a:	c8 01       	movw	r24, r16
 76c:	4d 96       	adiw	r24, 0x1d	; 29
 76e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <EEPROM_Read_Byte>
 772:	eb e0       	ldi	r30, 0x0B	; 11
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	ec 0f       	add	r30, r28
 778:	fd 1f       	adc	r31, r29
 77a:	e0 0f       	add	r30, r16
 77c:	f1 1f       	adc	r31, r17
 77e:	80 83       	st	Z, r24
			 _delay_ms(1000);
			LCD_clear();//Clear LCD
			//SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD "This is fantastic "
			 u8 st[18];
			 st[17] = '\0';
			 for(u8 i = 0; i <= 16; i++)
 780:	f3 94       	inc	r15
 782:	30 e1       	ldi	r19, 0x10	; 16
 784:	3f 15       	cp	r19, r15
 786:	78 f7       	brcc	.-34     	; 0x766 <GDF_MainCode+0x26c>
			 {
				 st[i] = EEPROM_Read_Byte(i+29);
			 };
			 
			 LCD_display(st); //That is fantastic
 788:	ce 01       	movw	r24, r28
 78a:	0b 96       	adiw	r24, 0x0b	; 11
 78c:	0e 94 b1 05 	call	0xb62	; 0xb62 <LCD_display>
			
			LCD_display(st); //I love you

		}
		else if ( ( ( 3125 < Analog_Thumb )&& (Analog_Thumb < 5000 ) ) && (Analog_Index_Finger < 625 ) && ( (3125 < Analog_Middle_Finger ) && (Analog_Middle_Finger < 5000 ) )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  &&  ( Analog_Little_Finger < 625 )   )////All fingers flat except middle, ring and thumb are totally bended
		{   
 790:	c4 ce       	rjmp	.-632    	; 0x51a <GDF_MainCode+0x20>
			 LCD_display(st); //That is fantastic
			
			
		}
		
		else if (  (Analog_Thumb < 625 ) && (Analog_Index_Finger < 625 ) && (Analog_Middle_Finger < 625 )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  &&  ( Analog_Little_Finger < 625 )   )////All fingers flat except ring is totally bended
 792:	01 37       	cpi	r16, 0x71	; 113
 794:	82 e0       	ldi	r24, 0x02	; 2
 796:	18 07       	cpc	r17, r24
 798:	c8 f5       	brcc	.+114    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 79a:	91 e7       	ldi	r25, 0x71	; 113
 79c:	29 16       	cp	r2, r25
 79e:	92 e0       	ldi	r25, 0x02	; 2
 7a0:	39 06       	cpc	r3, r25
 7a2:	a0 f5       	brcc	.+104    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7a4:	8c a1       	ldd	r24, Y+36	; 0x24
 7a6:	9d a1       	ldd	r25, Y+37	; 0x25
 7a8:	81 37       	cpi	r24, 0x71	; 113
 7aa:	92 40       	sbci	r25, 0x02	; 2
 7ac:	78 f5       	brcc	.+94     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7ae:	88 a1       	ldd	r24, Y+32	; 0x20
 7b0:	99 a1       	ldd	r25, Y+33	; 0x21
 7b2:	86 53       	subi	r24, 0x36	; 54
 7b4:	9c 40       	sbci	r25, 0x0C	; 12
 7b6:	82 35       	cpi	r24, 0x52	; 82
 7b8:	97 40       	sbci	r25, 0x07	; 7
 7ba:	40 f5       	brcc	.+80     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7bc:	21 37       	cpi	r18, 0x71	; 113
 7be:	32 40       	sbci	r19, 0x02	; 2
 7c0:	28 f5       	brcc	.+74     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7c2:	9f ef       	ldi	r25, 0xFF	; 255
 7c4:	e3 ed       	ldi	r30, 0xD3	; 211
 7c6:	20 e3       	ldi	r18, 0x30	; 48
 7c8:	91 50       	subi	r25, 0x01	; 1
 7ca:	e0 40       	sbci	r30, 0x00	; 0
 7cc:	20 40       	sbci	r18, 0x00	; 0
 7ce:	e1 f7       	brne	.-8      	; 0x7c8 <GDF_MainCode+0x2ce>
 7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <GDF_MainCode+0x2d8>
 7d2:	00 00       	nop
		{   
			
			 _delay_ms(1000);
			 LCD_clear();//Clear LCD
 7d4:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_clear>
			 //SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD" Really i love you"
			 u8 st[18];
			 st[17] = '\0';
 7d8:	1c 8e       	std	Y+28, r1	; 0x1c
			 for(u8 i = 0; i <= 16; i++)
 7da:	f1 2c       	mov	r15, r1
 7dc:	0f c0       	rjmp	.+30     	; 0x7fc <GDF_MainCode+0x302>
			 {
				 st[i] = EEPROM_Read_Byte(i+66);
 7de:	0f 2d       	mov	r16, r15
 7e0:	10 e0       	ldi	r17, 0x00	; 0
 7e2:	c8 01       	movw	r24, r16
 7e4:	8e 5b       	subi	r24, 0xBE	; 190
 7e6:	9f 4f       	sbci	r25, 0xFF	; 255
 7e8:	0e 94 58 07 	call	0xeb0	; 0xeb0 <EEPROM_Read_Byte>
 7ec:	eb e0       	ldi	r30, 0x0B	; 11
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	ec 0f       	add	r30, r28
 7f2:	fd 1f       	adc	r31, r29
 7f4:	e0 0f       	add	r30, r16
 7f6:	f1 1f       	adc	r31, r17
 7f8:	80 83       	st	Z, r24
			 _delay_ms(1000);
			 LCD_clear();//Clear LCD
			 //SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD" Really i love you"
			 u8 st[18];
			 st[17] = '\0';
			 for(u8 i = 0; i <= 16; i++)
 7fa:	f3 94       	inc	r15
 7fc:	30 e1       	ldi	r19, 0x10	; 16
 7fe:	3f 15       	cp	r19, r15
 800:	70 f7       	brcc	.-36     	; 0x7de <GDF_MainCode+0x2e4>
			 {
				 st[i] = EEPROM_Read_Byte(i+66);
			 }
			 
			 LCD_display(st); //I really love you
 802:	ce 01       	movw	r24, r28
 804:	0b 96       	adiw	r24, 0x0b	; 11
 806:	0e 94 b1 05 	call	0xb62	; 0xb62 <LCD_display>
			
			
		}
		
		else if (  (Analog_Thumb < 625 ) && (Analog_Index_Finger < 625 ) && (Analog_Middle_Finger < 625 )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  &&  ( Analog_Little_Finger < 625 )   )////All fingers flat except ring is totally bended
		{   
 80a:	87 ce       	rjmp	.-754    	; 0x51a <GDF_MainCode+0x20>
			 }
			 
			 LCD_display(st); //I really love you
			
		}
		else if ( ( ( 3125 < Analog_Thumb )&&(Analog_Thumb < 5000 ) ) && (( 1125 < Analog_Index_Finger)&&(Analog_Index_Finger < 3125 ) )&& ( (3125 < Analog_Middle_Finger ) && (Analog_Middle_Finger < 5000 ) )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  && ( ( 3125 < Analog_Little_Finger)&&(Analog_Little_Finger < 5000 ) )   )//All fingers are bended totally except index is bended by 45 degrees 
 80c:	82 e5       	ldi	r24, 0x52	; 82
 80e:	c8 16       	cp	r12, r24
 810:	87 e0       	ldi	r24, 0x07	; 7
 812:	d8 06       	cpc	r13, r24
 814:	f0 f5       	brcc	.+124    	; 0x892 <__stack+0x33>
 816:	c4 01       	movw	r24, r8
 818:	86 56       	subi	r24, 0x66	; 102
 81a:	94 40       	sbci	r25, 0x04	; 4
 81c:	8f 3c       	cpi	r24, 0xCF	; 207
 81e:	97 40       	sbci	r25, 0x07	; 7
 820:	c0 f5       	brcc	.+112    	; 0x892 <__stack+0x33>
 822:	c2 01       	movw	r24, r4
 824:	86 53       	subi	r24, 0x36	; 54
 826:	9c 40       	sbci	r25, 0x0C	; 12
 828:	82 35       	cpi	r24, 0x52	; 82
 82a:	97 40       	sbci	r25, 0x07	; 7
 82c:	90 f5       	brcc	.+100    	; 0x892 <__stack+0x33>
 82e:	88 a1       	ldd	r24, Y+32	; 0x20
 830:	99 a1       	ldd	r25, Y+33	; 0x21
 832:	86 53       	subi	r24, 0x36	; 54
 834:	9c 40       	sbci	r25, 0x0C	; 12
 836:	82 35       	cpi	r24, 0x52	; 82
 838:	97 40       	sbci	r25, 0x07	; 7
 83a:	58 f5       	brcc	.+86     	; 0x892 <__stack+0x33>
 83c:	ca 01       	movw	r24, r20
 83e:	86 53       	subi	r24, 0x36	; 54
 840:	9c 40       	sbci	r25, 0x0C	; 12
 842:	82 35       	cpi	r24, 0x52	; 82
 844:	97 40       	sbci	r25, 0x07	; 7
 846:	28 f5       	brcc	.+74     	; 0x892 <__stack+0x33>
 848:	2f ef       	ldi	r18, 0xFF	; 255
 84a:	33 ed       	ldi	r19, 0xD3	; 211
 84c:	40 e3       	ldi	r20, 0x30	; 48
 84e:	21 50       	subi	r18, 0x01	; 1
 850:	30 40       	sbci	r19, 0x00	; 0
 852:	40 40       	sbci	r20, 0x00	; 0
 854:	e1 f7       	brne	.-8      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 856:	00 c0       	rjmp	.+0      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 858:	00 00       	nop
		{   
			
			 _delay_ms(1000);
			 LCD_clear();//Clear LCD
 85a:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_clear>
			 //SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD" You "
			
			u8 st[4];
			st[3] = '\0';
 85e:	1e 86       	std	Y+14, r1	; 0x0e
			for(u8 i = 0; i <= 2; i++)
 860:	f1 2c       	mov	r15, r1
 862:	0f c0       	rjmp	.+30     	; 0x882 <__stack+0x23>
			{
				st[i] = EEPROM_Read_Byte(i+83);
 864:	0f 2d       	mov	r16, r15
 866:	10 e0       	ldi	r17, 0x00	; 0
 868:	c8 01       	movw	r24, r16
 86a:	8d 5a       	subi	r24, 0xAD	; 173
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <EEPROM_Read_Byte>
 872:	eb e0       	ldi	r30, 0x0B	; 11
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	ec 0f       	add	r30, r28
 878:	fd 1f       	adc	r31, r29
 87a:	e0 0f       	add	r30, r16
 87c:	f1 1f       	adc	r31, r17
 87e:	80 83       	st	Z, r24
			 LCD_clear();//Clear LCD
			 //SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD" You "
			
			u8 st[4];
			st[3] = '\0';
			for(u8 i = 0; i <= 2; i++)
 880:	f3 94       	inc	r15
 882:	52 e0       	ldi	r21, 0x02	; 2
 884:	5f 15       	cp	r21, r15
 886:	70 f7       	brcc	.-36     	; 0x864 <__stack+0x5>
			{
				st[i] = EEPROM_Read_Byte(i+83);
			};
			
			LCD_display(st); //you
 888:	ce 01       	movw	r24, r28
 88a:	0b 96       	adiw	r24, 0x0b	; 11
 88c:	0e 94 b1 05 	call	0xb62	; 0xb62 <LCD_display>
			 
			 LCD_display(st); //I really love you
			
		}
		else if ( ( ( 3125 < Analog_Thumb )&&(Analog_Thumb < 5000 ) ) && (( 1125 < Analog_Index_Finger)&&(Analog_Index_Finger < 3125 ) )&& ( (3125 < Analog_Middle_Finger ) && (Analog_Middle_Finger < 5000 ) )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  && ( ( 3125 < Analog_Little_Finger)&&(Analog_Little_Finger < 5000 ) )   )//All fingers are bended totally except index is bended by 45 degrees 
		{   
 890:	44 ce       	rjmp	.-888    	; 0x51a <GDF_MainCode+0x20>
			};
			
			LCD_display(st); //you
			
		}
		else if (  (Analog_Thumb < 625 ) && (( 3125 < Analog_Index_Finger)&&(Analog_Index_Finger < 5000 ) ) && (( 3125 < Analog_Middle_Finger)&&(Analog_Middle_Finger < 5000 ) )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  &&  ( ( 3125 < Analog_Little_Finger)&&(Analog_Little_Finger < 5000 ) )   )//All fingers are bended except thumb is flat
 892:	01 37       	cpi	r16, 0x71	; 113
 894:	12 40       	sbci	r17, 0x02	; 2
 896:	e8 f5       	brcc	.+122    	; 0x912 <__stack+0xb3>
 898:	c4 01       	movw	r24, r8
 89a:	86 53       	subi	r24, 0x36	; 54
 89c:	9c 40       	sbci	r25, 0x0C	; 12
 89e:	82 35       	cpi	r24, 0x52	; 82
 8a0:	97 40       	sbci	r25, 0x07	; 7
 8a2:	b8 f5       	brcc	.+110    	; 0x912 <__stack+0xb3>
 8a4:	c2 01       	movw	r24, r4
 8a6:	86 53       	subi	r24, 0x36	; 54
 8a8:	9c 40       	sbci	r25, 0x0C	; 12
 8aa:	82 35       	cpi	r24, 0x52	; 82
 8ac:	97 40       	sbci	r25, 0x07	; 7
 8ae:	88 f5       	brcc	.+98     	; 0x912 <__stack+0xb3>
 8b0:	88 a1       	ldd	r24, Y+32	; 0x20
 8b2:	99 a1       	ldd	r25, Y+33	; 0x21
 8b4:	86 53       	subi	r24, 0x36	; 54
 8b6:	9c 40       	sbci	r25, 0x0C	; 12
 8b8:	82 35       	cpi	r24, 0x52	; 82
 8ba:	97 40       	sbci	r25, 0x07	; 7
 8bc:	50 f5       	brcc	.+84     	; 0x912 <__stack+0xb3>
 8be:	ca 01       	movw	r24, r20
 8c0:	86 53       	subi	r24, 0x36	; 54
 8c2:	9c 40       	sbci	r25, 0x0C	; 12
 8c4:	82 35       	cpi	r24, 0x52	; 82
 8c6:	97 40       	sbci	r25, 0x07	; 7
 8c8:	20 f5       	brcc	.+72     	; 0x912 <__stack+0xb3>
 8ca:	2f ef       	ldi	r18, 0xFF	; 255
 8cc:	33 ed       	ldi	r19, 0xD3	; 211
 8ce:	40 e3       	ldi	r20, 0x30	; 48
 8d0:	21 50       	subi	r18, 0x01	; 1
 8d2:	30 40       	sbci	r19, 0x00	; 0
 8d4:	40 40       	sbci	r20, 0x00	; 0
 8d6:	e1 f7       	brne	.-8      	; 0x8d0 <__stack+0x71>
 8d8:	00 c0       	rjmp	.+0      	; 0x8da <__stack+0x7b>
 8da:	00 00       	nop
		{   
			
			 _delay_ms(1000);
			 LCD_clear();//Clear LCD
 8dc:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_clear>
			 //SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD" Good job "
			
			 u8 st[9];
			 st[8] = '\0';
 8e0:	1b 8a       	std	Y+19, r1	; 0x13
			 for(u8 i = 0; i <= 7; i++)
 8e2:	f1 2c       	mov	r15, r1
 8e4:	0e c0       	rjmp	.+28     	; 0x902 <__stack+0xa3>
			 {
				 st[i] = EEPROM_Read_Byte(i+10);
 8e6:	0f 2d       	mov	r16, r15
 8e8:	10 e0       	ldi	r17, 0x00	; 0
 8ea:	c8 01       	movw	r24, r16
 8ec:	0a 96       	adiw	r24, 0x0a	; 10
 8ee:	0e 94 58 07 	call	0xeb0	; 0xeb0 <EEPROM_Read_Byte>
 8f2:	eb e0       	ldi	r30, 0x0B	; 11
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	ec 0f       	add	r30, r28
 8f8:	fd 1f       	adc	r31, r29
 8fa:	e0 0f       	add	r30, r16
 8fc:	f1 1f       	adc	r31, r17
 8fe:	80 83       	st	Z, r24
			 LCD_clear();//Clear LCD
			 //SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD" Good job "
			
			 u8 st[9];
			 st[8] = '\0';
			 for(u8 i = 0; i <= 7; i++)
 900:	f3 94       	inc	r15
 902:	57 e0       	ldi	r21, 0x07	; 7
 904:	5f 15       	cp	r21, r15
 906:	78 f7       	brcc	.-34     	; 0x8e6 <__stack+0x87>
			 {
				 st[i] = EEPROM_Read_Byte(i+10);
			 };
			 
			 LCD_display(st); //Good job
 908:	ce 01       	movw	r24, r28
 90a:	0b 96       	adiw	r24, 0x0b	; 11
 90c:	0e 94 b1 05 	call	0xb62	; 0xb62 <LCD_display>
			
			LCD_display(st); //you
			
		}
		else if (  (Analog_Thumb < 625 ) && (( 3125 < Analog_Index_Finger)&&(Analog_Index_Finger < 5000 ) ) && (( 3125 < Analog_Middle_Finger)&&(Analog_Middle_Finger < 5000 ) )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  &&  ( ( 3125 < Analog_Little_Finger)&&(Analog_Little_Finger < 5000 ) )   )//All fingers are bended except thumb is flat
		{   
 910:	04 ce       	rjmp	.-1016   	; 0x51a <GDF_MainCode+0x20>
			 };
			 
			 LCD_display(st); //Good job
			 
		}
		else if (  (( 3125 < Analog_Thumb )&&(Analog_Thumb < 5000 ) ) && (( 1125 < Analog_Index_Finger)&&(Analog_Index_Finger < 3125 ) ) && ( (1125 < Analog_Middle_Finger ) && (Analog_Middle_Finger < 3125 ) )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  &&  ( ( 3125 < Analog_Little_Finger)&&(Analog_Little_Finger < 5000 ) )   )//All fingers are bended totally except middle and index are bended by 45 degrees
 912:	82 e5       	ldi	r24, 0x52	; 82
 914:	c8 16       	cp	r12, r24
 916:	87 e0       	ldi	r24, 0x07	; 7
 918:	d8 06       	cpc	r13, r24
 91a:	08 f0       	brcs	.+2      	; 0x91e <__stack+0xbf>
 91c:	fe cd       	rjmp	.-1028   	; 0x51a <GDF_MainCode+0x20>
 91e:	96 e6       	ldi	r25, 0x66	; 102
 920:	89 1a       	sub	r8, r25
 922:	94 e0       	ldi	r25, 0x04	; 4
 924:	99 0a       	sbc	r9, r25
 926:	ef ec       	ldi	r30, 0xCF	; 207
 928:	8e 16       	cp	r8, r30
 92a:	e7 e0       	ldi	r30, 0x07	; 7
 92c:	9e 06       	cpc	r9, r30
 92e:	08 f0       	brcs	.+2      	; 0x932 <__stack+0xd3>
 930:	f4 cd       	rjmp	.-1048   	; 0x51a <GDF_MainCode+0x20>
 932:	26 e6       	ldi	r18, 0x66	; 102
 934:	42 1a       	sub	r4, r18
 936:	24 e0       	ldi	r18, 0x04	; 4
 938:	52 0a       	sbc	r5, r18
 93a:	3f ec       	ldi	r19, 0xCF	; 207
 93c:	43 16       	cp	r4, r19
 93e:	37 e0       	ldi	r19, 0x07	; 7
 940:	53 06       	cpc	r5, r19
 942:	08 f0       	brcs	.+2      	; 0x946 <__stack+0xe7>
 944:	ea cd       	rjmp	.-1068   	; 0x51a <GDF_MainCode+0x20>
 946:	88 a1       	ldd	r24, Y+32	; 0x20
 948:	99 a1       	ldd	r25, Y+33	; 0x21
 94a:	86 53       	subi	r24, 0x36	; 54
 94c:	9c 40       	sbci	r25, 0x0C	; 12
 94e:	82 35       	cpi	r24, 0x52	; 82
 950:	97 40       	sbci	r25, 0x07	; 7
 952:	08 f0       	brcs	.+2      	; 0x956 <__stack+0xf7>
 954:	e2 cd       	rjmp	.-1084   	; 0x51a <GDF_MainCode+0x20>
 956:	46 53       	subi	r20, 0x36	; 54
 958:	5c 40       	sbci	r21, 0x0C	; 12
 95a:	42 35       	cpi	r20, 0x52	; 82
 95c:	57 40       	sbci	r21, 0x07	; 7
 95e:	08 f0       	brcs	.+2      	; 0x962 <__stack+0x103>
 960:	dc cd       	rjmp	.-1096   	; 0x51a <GDF_MainCode+0x20>
 962:	3f ef       	ldi	r19, 0xFF	; 255
 964:	43 ed       	ldi	r20, 0xD3	; 211
 966:	50 e3       	ldi	r21, 0x30	; 48
 968:	31 50       	subi	r19, 0x01	; 1
 96a:	40 40       	sbci	r20, 0x00	; 0
 96c:	50 40       	sbci	r21, 0x00	; 0
 96e:	e1 f7       	brne	.-8      	; 0x968 <__stack+0x109>
 970:	00 c0       	rjmp	.+0      	; 0x972 <__stack+0x113>
 972:	00 00       	nop
		{   
			
			 _delay_ms(1000);
			LCD_clear();//Clear LCD
 974:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_clear>
			//SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD" I watch you "
			u8 st[12];
			st[11] = '\0';
 978:	1e 8a       	std	Y+22, r1	; 0x16
			for(u8 i = 0; i <= 10; i++)
 97a:	f1 2c       	mov	r15, r1
 97c:	0e c0       	rjmp	.+28     	; 0x99a <__stack+0x13b>
			{
				st[i] = EEPROM_Read_Byte(i+18);
 97e:	0f 2d       	mov	r16, r15
 980:	10 e0       	ldi	r17, 0x00	; 0
 982:	c8 01       	movw	r24, r16
 984:	42 96       	adiw	r24, 0x12	; 18
 986:	0e 94 58 07 	call	0xeb0	; 0xeb0 <EEPROM_Read_Byte>
 98a:	eb e0       	ldi	r30, 0x0B	; 11
 98c:	f0 e0       	ldi	r31, 0x00	; 0
 98e:	ec 0f       	add	r30, r28
 990:	fd 1f       	adc	r31, r29
 992:	e0 0f       	add	r30, r16
 994:	f1 1f       	adc	r31, r17
 996:	80 83       	st	Z, r24
			 _delay_ms(1000);
			LCD_clear();//Clear LCD
			//SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD" I watch you "
			u8 st[12];
			st[11] = '\0';
			for(u8 i = 0; i <= 10; i++)
 998:	f3 94       	inc	r15
 99a:	8a e0       	ldi	r24, 0x0A	; 10
 99c:	8f 15       	cp	r24, r15
 99e:	78 f7       	brcc	.-34     	; 0x97e <__stack+0x11f>
			{
				st[i] = EEPROM_Read_Byte(i+18);
			};
			
			LCD_display(st); //I watch you
 9a0:	ce 01       	movw	r24, r28
 9a2:	0b 96       	adiw	r24, 0x0b	; 11
 9a4:	0e 94 b1 05 	call	0xb62	; 0xb62 <LCD_display>
 9a8:	b8 cd       	rjmp	.-1168   	; 0x51a <GDF_MainCode+0x20>

000009aa <PRIVATE_WriteHalfPort>:
		{
			LCD_sendChar((Local_reversed%10)+'0');
			Local_reversed /= 10;
		}while (Local_reversed != 1);
	}
}
 9aa:	cf 93       	push	r28
 9ac:	c8 2f       	mov	r28, r24
 9ae:	48 2f       	mov	r20, r24
 9b0:	41 70       	andi	r20, 0x01	; 1
 9b2:	64 e0       	ldi	r22, 0x04	; 4
 9b4:	82 e0       	ldi	r24, 0x02	; 2
 9b6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 9ba:	c1 fb       	bst	r28, 1
 9bc:	44 27       	eor	r20, r20
 9be:	40 f9       	bld	r20, 0
 9c0:	65 e0       	ldi	r22, 0x05	; 5
 9c2:	82 e0       	ldi	r24, 0x02	; 2
 9c4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 9c8:	c2 fb       	bst	r28, 2
 9ca:	44 27       	eor	r20, r20
 9cc:	40 f9       	bld	r20, 0
 9ce:	66 e0       	ldi	r22, 0x06	; 6
 9d0:	82 e0       	ldi	r24, 0x02	; 2
 9d2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 9d6:	c3 fb       	bst	r28, 3
 9d8:	44 27       	eor	r20, r20
 9da:	40 f9       	bld	r20, 0
 9dc:	67 e0       	ldi	r22, 0x07	; 7
 9de:	82 e0       	ldi	r24, 0x02	; 2
 9e0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 9e4:	cf 91       	pop	r28
 9e6:	08 95       	ret

000009e8 <LCD_sendCmnd>:
 9e8:	cf 93       	push	r28
 9ea:	c8 2f       	mov	r28, r24
 9ec:	40 e0       	ldi	r20, 0x00	; 0
 9ee:	61 e0       	ldi	r22, 0x01	; 1
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 9f6:	40 e0       	ldi	r20, 0x00	; 0
 9f8:	62 e0       	ldi	r22, 0x02	; 2
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 a00:	8c 2f       	mov	r24, r28
 a02:	82 95       	swap	r24
 a04:	8f 70       	andi	r24, 0x0F	; 15
 a06:	0e 94 d5 04 	call	0x9aa	; 0x9aa <PRIVATE_WriteHalfPort>
 a0a:	41 e0       	ldi	r20, 0x01	; 1
 a0c:	63 e0       	ldi	r22, 0x03	; 3
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 a14:	8f e9       	ldi	r24, 0x9F	; 159
 a16:	9f e0       	ldi	r25, 0x0F	; 15
 a18:	01 97       	sbiw	r24, 0x01	; 1
 a1a:	f1 f7       	brne	.-4      	; 0xa18 <LCD_sendCmnd+0x30>
 a1c:	00 c0       	rjmp	.+0      	; 0xa1e <LCD_sendCmnd+0x36>
 a1e:	00 00       	nop
 a20:	40 e0       	ldi	r20, 0x00	; 0
 a22:	63 e0       	ldi	r22, 0x03	; 3
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 a2a:	8c 2f       	mov	r24, r28
 a2c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <PRIVATE_WriteHalfPort>
 a30:	41 e0       	ldi	r20, 0x01	; 1
 a32:	63 e0       	ldi	r22, 0x03	; 3
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 a3a:	8f e9       	ldi	r24, 0x9F	; 159
 a3c:	9f e0       	ldi	r25, 0x0F	; 15
 a3e:	01 97       	sbiw	r24, 0x01	; 1
 a40:	f1 f7       	brne	.-4      	; 0xa3e <LCD_sendCmnd+0x56>
 a42:	00 c0       	rjmp	.+0      	; 0xa44 <LCD_sendCmnd+0x5c>
 a44:	00 00       	nop
 a46:	40 e0       	ldi	r20, 0x00	; 0
 a48:	63 e0       	ldi	r22, 0x03	; 3
 a4a:	81 e0       	ldi	r24, 0x01	; 1
 a4c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 a50:	cf 91       	pop	r28
 a52:	08 95       	ret

00000a54 <LCD_init>:
 a54:	2f e7       	ldi	r18, 0x7F	; 127
 a56:	85 eb       	ldi	r24, 0xB5	; 181
 a58:	91 e0       	ldi	r25, 0x01	; 1
 a5a:	21 50       	subi	r18, 0x01	; 1
 a5c:	80 40       	sbci	r24, 0x00	; 0
 a5e:	90 40       	sbci	r25, 0x00	; 0
 a60:	e1 f7       	brne	.-8      	; 0xa5a <LCD_init+0x6>
 a62:	00 c0       	rjmp	.+0      	; 0xa64 <LCD_init+0x10>
 a64:	00 00       	nop
 a66:	40 e0       	ldi	r20, 0x00	; 0
 a68:	61 e0       	ldi	r22, 0x01	; 1
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 a70:	40 e0       	ldi	r20, 0x00	; 0
 a72:	62 e0       	ldi	r22, 0x02	; 2
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 a7a:	82 e0       	ldi	r24, 0x02	; 2
 a7c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <PRIVATE_WriteHalfPort>
 a80:	41 e0       	ldi	r20, 0x01	; 1
 a82:	63 e0       	ldi	r22, 0x03	; 3
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 a8a:	8f e9       	ldi	r24, 0x9F	; 159
 a8c:	9f e0       	ldi	r25, 0x0F	; 15
 a8e:	01 97       	sbiw	r24, 0x01	; 1
 a90:	f1 f7       	brne	.-4      	; 0xa8e <LCD_init+0x3a>
 a92:	00 c0       	rjmp	.+0      	; 0xa94 <LCD_init+0x40>
 a94:	00 00       	nop
 a96:	40 e0       	ldi	r20, 0x00	; 0
 a98:	63 e0       	ldi	r22, 0x03	; 3
 a9a:	81 e0       	ldi	r24, 0x01	; 1
 a9c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 aa0:	88 e2       	ldi	r24, 0x28	; 40
 aa2:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_sendCmnd>
 aa6:	90 ee       	ldi	r25, 0xE0	; 224
 aa8:	9a 95       	dec	r25
 aaa:	f1 f7       	brne	.-4      	; 0xaa8 <LCD_init+0x54>
 aac:	8f e0       	ldi	r24, 0x0F	; 15
 aae:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_sendCmnd>
 ab2:	20 ee       	ldi	r18, 0xE0	; 224
 ab4:	2a 95       	dec	r18
 ab6:	f1 f7       	brne	.-4      	; 0xab4 <LCD_init+0x60>
 ab8:	81 e0       	ldi	r24, 0x01	; 1
 aba:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_sendCmnd>
 abe:	8f ef       	ldi	r24, 0xFF	; 255
 ac0:	98 e1       	ldi	r25, 0x18	; 24
 ac2:	01 97       	sbiw	r24, 0x01	; 1
 ac4:	f1 f7       	brne	.-4      	; 0xac2 <LCD_init+0x6e>
 ac6:	00 c0       	rjmp	.+0      	; 0xac8 <LCD_init+0x74>
 ac8:	00 00       	nop
 aca:	86 e0       	ldi	r24, 0x06	; 6
 acc:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_sendCmnd>
 ad0:	08 95       	ret

00000ad2 <LCD_sendChar>:
 ad2:	cf 93       	push	r28
 ad4:	c8 2f       	mov	r28, r24
 ad6:	41 e0       	ldi	r20, 0x01	; 1
 ad8:	61 e0       	ldi	r22, 0x01	; 1
 ada:	81 e0       	ldi	r24, 0x01	; 1
 adc:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 ae0:	40 e0       	ldi	r20, 0x00	; 0
 ae2:	62 e0       	ldi	r22, 0x02	; 2
 ae4:	81 e0       	ldi	r24, 0x01	; 1
 ae6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 aea:	8c 2f       	mov	r24, r28
 aec:	82 95       	swap	r24
 aee:	8f 70       	andi	r24, 0x0F	; 15
 af0:	0e 94 d5 04 	call	0x9aa	; 0x9aa <PRIVATE_WriteHalfPort>
 af4:	41 e0       	ldi	r20, 0x01	; 1
 af6:	63 e0       	ldi	r22, 0x03	; 3
 af8:	81 e0       	ldi	r24, 0x01	; 1
 afa:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 afe:	8f e9       	ldi	r24, 0x9F	; 159
 b00:	9f e0       	ldi	r25, 0x0F	; 15
 b02:	01 97       	sbiw	r24, 0x01	; 1
 b04:	f1 f7       	brne	.-4      	; 0xb02 <LCD_sendChar+0x30>
 b06:	00 c0       	rjmp	.+0      	; 0xb08 <LCD_sendChar+0x36>
 b08:	00 00       	nop
 b0a:	40 e0       	ldi	r20, 0x00	; 0
 b0c:	63 e0       	ldi	r22, 0x03	; 3
 b0e:	81 e0       	ldi	r24, 0x01	; 1
 b10:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 b14:	8c 2f       	mov	r24, r28
 b16:	0e 94 d5 04 	call	0x9aa	; 0x9aa <PRIVATE_WriteHalfPort>
 b1a:	41 e0       	ldi	r20, 0x01	; 1
 b1c:	63 e0       	ldi	r22, 0x03	; 3
 b1e:	81 e0       	ldi	r24, 0x01	; 1
 b20:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 b24:	8f e9       	ldi	r24, 0x9F	; 159
 b26:	9f e0       	ldi	r25, 0x0F	; 15
 b28:	01 97       	sbiw	r24, 0x01	; 1
 b2a:	f1 f7       	brne	.-4      	; 0xb28 <LCD_sendChar+0x56>
 b2c:	00 c0       	rjmp	.+0      	; 0xb2e <LCD_sendChar+0x5c>
 b2e:	00 00       	nop
 b30:	40 e0       	ldi	r20, 0x00	; 0
 b32:	63 e0       	ldi	r22, 0x03	; 3
 b34:	81 e0       	ldi	r24, 0x01	; 1
 b36:	0e 94 d5 06 	call	0xdaa	; 0xdaa <DIO_setPinValue>
 b3a:	cf 91       	pop	r28
 b3c:	08 95       	ret

00000b3e <LCD_goToSpecificPosition>:
void LCD_goToSpecificPosition(u8 LineNumber, u8 Position)
{
	if(LineNumber == LCD_LINE_ONE)
 b3e:	81 30       	cpi	r24, 0x01	; 1
 b40:	39 f4       	brne	.+14     	; 0xb50 <LCD_goToSpecificPosition+0x12>
	{
		if(Position <= 15)
 b42:	60 31       	cpi	r22, 0x10	; 16
 b44:	68 f4       	brcc	.+26     	; 0xb60 <LCD_goToSpecificPosition+0x22>
		{
			LCD_sendCmnd(0x80 + Position);
 b46:	80 e8       	ldi	r24, 0x80	; 128
 b48:	86 0f       	add	r24, r22
 b4a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_sendCmnd>
 b4e:	08 95       	ret
		}
	}

	else if (LineNumber == LCD_LINE_TWO)
 b50:	82 30       	cpi	r24, 0x02	; 2
 b52:	31 f4       	brne	.+12     	; 0xb60 <LCD_goToSpecificPosition+0x22>
	{
		if(Position <= 15)
 b54:	60 31       	cpi	r22, 0x10	; 16
 b56:	20 f4       	brcc	.+8      	; 0xb60 <LCD_goToSpecificPosition+0x22>
		{
			LCD_sendCmnd(0xc0 + Position);
 b58:	80 ec       	ldi	r24, 0xC0	; 192
 b5a:	86 0f       	add	r24, r22
 b5c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_sendCmnd>
 b60:	08 95       	ret

00000b62 <LCD_display>:
		}
	}
}

void LCD_display(u8*string)
{
 b62:	ef 92       	push	r14
 b64:	ff 92       	push	r15
 b66:	0f 93       	push	r16
 b68:	1f 93       	push	r17
 b6a:	cf 93       	push	r28
 b6c:	df 93       	push	r29
 b6e:	ec 01       	movw	r28, r24
	u8 i = 0;
	u8 length = 1;
 b70:	91 e0       	ldi	r25, 0x01	; 1
	}
}

void LCD_display(u8*string)
{
	u8 i = 0;
 b72:	80 e0       	ldi	r24, 0x00	; 0
	u8 length = 1;
	while(string[i] != '\0')
 b74:	02 c0       	rjmp	.+4      	; 0xb7a <LCD_display+0x18>
	{
		length++;
 b76:	9f 5f       	subi	r25, 0xFF	; 255
		i++;
 b78:	8f 5f       	subi	r24, 0xFF	; 255

void LCD_display(u8*string)
{
	u8 i = 0;
	u8 length = 1;
	while(string[i] != '\0')
 b7a:	fe 01       	movw	r30, r28
 b7c:	e8 0f       	add	r30, r24
 b7e:	f1 1d       	adc	r31, r1
 b80:	20 81       	ld	r18, Z
 b82:	21 11       	cpse	r18, r1
 b84:	f8 cf       	rjmp	.-16     	; 0xb76 <LCD_display+0x14>
	{
		length++;
		i++;
	}
	
	if(length > 17)
 b86:	92 31       	cpi	r25, 0x12	; 18
 b88:	48 f4       	brcc	.+18     	; 0xb9c <LCD_display+0x3a>
 b8a:	2c c0       	rjmp	.+88     	; 0xbe4 <LCD_display+0x82>
		u8 check = -1;
		if((string[16] != ' ') || (string[16] != '\0'))
		{
			for(u8 j = 16; j > 0; j--)
			{
				if(string[j] == ' ')
 b8c:	fe 01       	movw	r30, r28
 b8e:	e1 0f       	add	r30, r17
 b90:	f1 1d       	adc	r31, r1
 b92:	80 81       	ld	r24, Z
 b94:	80 32       	cpi	r24, 0x20	; 32
 b96:	31 f0       	breq	.+12     	; 0xba4 <LCD_display+0x42>
	if(length > 17)
	{
		u8 check = -1;
		if((string[16] != ' ') || (string[16] != '\0'))
		{
			for(u8 j = 16; j > 0; j--)
 b98:	11 50       	subi	r17, 0x01	; 1
 b9a:	01 c0       	rjmp	.+2      	; 0xb9e <LCD_display+0x3c>
 b9c:	10 e1       	ldi	r17, 0x10	; 16
 b9e:	11 11       	cpse	r17, r1
 ba0:	f5 cf       	rjmp	.-22     	; 0xb8c <LCD_display+0x2a>
		i++;
	}
	
	if(length > 17)
	{
		u8 check = -1;
 ba2:	1f ef       	ldi	r17, 0xFF	; 255
				{
					check = j;
					break;
				}
			}
			u8 counter1 = 0;
 ba4:	00 e0       	ldi	r16, 0x00	; 0
			while (string[counter1]!='\0')
 ba6:	16 c0       	rjmp	.+44     	; 0xbd4 <LCD_display+0x72>
			{
				if(counter1 == (check+1))
 ba8:	40 2f       	mov	r20, r16
 baa:	50 e0       	ldi	r21, 0x00	; 0
 bac:	21 2f       	mov	r18, r17
 bae:	30 e0       	ldi	r19, 0x00	; 0
 bb0:	2f 5f       	subi	r18, 0xFF	; 255
 bb2:	3f 4f       	sbci	r19, 0xFF	; 255
 bb4:	42 17       	cp	r20, r18
 bb6:	53 07       	cpc	r21, r19
 bb8:	51 f4       	brne	.+20     	; 0xbce <LCD_display+0x6c>
				{
					LCD_goToSpecificPosition(2, 0);
 bba:	60 e0       	ldi	r22, 0x00	; 0
 bbc:	82 e0       	ldi	r24, 0x02	; 2
 bbe:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LCD_goToSpecificPosition>
					LCD_sendChar(string[counter1]);
 bc2:	f7 01       	movw	r30, r14
 bc4:	80 81       	ld	r24, Z
 bc6:	0e 94 69 05 	call	0xad2	; 0xad2 <LCD_sendChar>
					++counter1;
 bca:	0f 5f       	subi	r16, 0xFF	; 255
 bcc:	03 c0       	rjmp	.+6      	; 0xbd4 <LCD_display+0x72>
				}
				else
				{
					LCD_sendChar(string[counter1]);
 bce:	0e 94 69 05 	call	0xad2	; 0xad2 <LCD_sendChar>
					++counter1;
 bd2:	0f 5f       	subi	r16, 0xFF	; 255
					check = j;
					break;
				}
			}
			u8 counter1 = 0;
			while (string[counter1]!='\0')
 bd4:	7e 01       	movw	r14, r28
 bd6:	e0 0e       	add	r14, r16
 bd8:	f1 1c       	adc	r15, r1
 bda:	f7 01       	movw	r30, r14
 bdc:	80 81       	ld	r24, Z
 bde:	81 11       	cpse	r24, r1
 be0:	e3 cf       	rjmp	.-58     	; 0xba8 <LCD_display+0x46>
 be2:	27 c0       	rjmp	.+78     	; 0xc32 <LCD_display+0xd0>
					++counter1;
				}
			}
		}
	}
	else if(string[16] == ' ')
 be4:	88 89       	ldd	r24, Y+16	; 0x10
 be6:	80 32       	cpi	r24, 0x20	; 32
 be8:	91 f0       	breq	.+36     	; 0xc0e <LCD_display+0xac>
 bea:	10 e0       	ldi	r17, 0x00	; 0
 bec:	1c c0       	rjmp	.+56     	; 0xc26 <LCD_display+0xc4>
	{
		u8 counter2 = 0;
		while (string[counter2]!='\0')
		{
			if(counter2 <= 16)
 bee:	11 31       	cpi	r17, 0x11	; 17
 bf0:	50 f4       	brcc	.+20     	; 0xc06 <LCD_display+0xa4>
			{
				LCD_goToSpecificPosition(2, 0);
 bf2:	60 e0       	ldi	r22, 0x00	; 0
 bf4:	82 e0       	ldi	r24, 0x02	; 2
 bf6:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LCD_goToSpecificPosition>
				LCD_sendChar(string[counter2]);
 bfa:	f7 01       	movw	r30, r14
 bfc:	80 81       	ld	r24, Z
 bfe:	0e 94 69 05 	call	0xad2	; 0xad2 <LCD_sendChar>
				++counter2;
 c02:	1f 5f       	subi	r17, 0xFF	; 255
 c04:	05 c0       	rjmp	.+10     	; 0xc10 <LCD_display+0xae>
			}
			else
			{
				LCD_sendChar(string[counter2]);
 c06:	0e 94 69 05 	call	0xad2	; 0xad2 <LCD_sendChar>
				++counter2;
 c0a:	1f 5f       	subi	r17, 0xFF	; 255
 c0c:	01 c0       	rjmp	.+2      	; 0xc10 <LCD_display+0xae>
 c0e:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	else if(string[16] == ' ')
	{
		u8 counter2 = 0;
		while (string[counter2]!='\0')
 c10:	7e 01       	movw	r14, r28
 c12:	e1 0e       	add	r14, r17
 c14:	f1 1c       	adc	r15, r1
 c16:	f7 01       	movw	r30, r14
 c18:	80 81       	ld	r24, Z
 c1a:	81 11       	cpse	r24, r1
 c1c:	e8 cf       	rjmp	.-48     	; 0xbee <LCD_display+0x8c>
 c1e:	09 c0       	rjmp	.+18     	; 0xc32 <LCD_display+0xd0>
	else
	{
		u8 counter3=0;
		while (string[counter3]!='\0')
		{
			LCD_sendChar(string[counter3]);
 c20:	0e 94 69 05 	call	0xad2	; 0xad2 <LCD_sendChar>
			++counter3;
 c24:	1f 5f       	subi	r17, 0xFF	; 255
		}
	}
	else
	{
		u8 counter3=0;
		while (string[counter3]!='\0')
 c26:	fe 01       	movw	r30, r28
 c28:	e1 0f       	add	r30, r17
 c2a:	f1 1d       	adc	r31, r1
 c2c:	80 81       	ld	r24, Z
 c2e:	81 11       	cpse	r24, r1
 c30:	f7 cf       	rjmp	.-18     	; 0xc20 <LCD_display+0xbe>
		{
			LCD_sendChar(string[counter3]);
			++counter3;
		}
	}
}
 c32:	df 91       	pop	r29
 c34:	cf 91       	pop	r28
 c36:	1f 91       	pop	r17
 c38:	0f 91       	pop	r16
 c3a:	ff 90       	pop	r15
 c3c:	ef 90       	pop	r14
 c3e:	08 95       	ret

00000c40 <LCD_clear>:

void LCD_clear(void)
{
	LCD_sendCmnd(0x01);		/* Clear display */
 c40:	81 e0       	ldi	r24, 0x01	; 1
 c42:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_sendCmnd>
 c46:	8f e3       	ldi	r24, 0x3F	; 63
 c48:	9f e1       	ldi	r25, 0x1F	; 31
 c4a:	01 97       	sbiw	r24, 0x01	; 1
 c4c:	f1 f7       	brne	.-4      	; 0xc4a <LCD_clear+0xa>
 c4e:	00 c0       	rjmp	.+0      	; 0xc50 <LCD_clear+0x10>
 c50:	00 00       	nop
	_delay_ms(2);
	LCD_sendCmnd (0x80);		/* Cursor at home position */
 c52:	80 e8       	ldi	r24, 0x80	; 128
 c54:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_sendCmnd>
 c58:	08 95       	ret

00000c5a <ADC_init>:


void ADC_init( void )
{
	// SELECT REFRENCE VOLTAGE "Vref" = AVCC
	SET_BIT( ADMUX , 6 );
 c5a:	87 b1       	in	r24, 0x07	; 7
 c5c:	80 64       	ori	r24, 0x40	; 64
 c5e:	87 b9       	out	0x07, r24	; 7
	CLR_BIT( ADMUX , 7 );
 c60:	87 b1       	in	r24, 0x07	; 7
 c62:	8f 77       	andi	r24, 0x7F	; 127
 c64:	87 b9       	out	0x07, r24	; 7
	// Select right adjustment to read all 10 bits 
	CLR_BIT( ADMUX , 5 );
 c66:	87 b1       	in	r24, 0x07	; 7
 c68:	8f 7d       	andi	r24, 0xDF	; 223
 c6a:	87 b9       	out	0x07, r24	; 7
	// SINGLE MODE (close auto trigger) 
	CLR_BIT( ADCSRA , 5 );
 c6c:	86 b1       	in	r24, 0x06	; 6
 c6e:	8f 7d       	andi	r24, 0xDF	; 223
 c70:	86 b9       	out	0x06, r24	; 6
	//ADC ENABLE
	SET_BIT( ADCSRA , 7 );
 c72:	86 b1       	in	r24, 0x06	; 6
 c74:	80 68       	ori	r24, 0x80	; 128
 c76:	86 b9       	out	0x06, r24	; 6
	// Prescaler to adjust the clock 128 for 16MHZ ( 125 KHZ)
	SET_BIT( ADCSRA , 0 );
 c78:	86 b1       	in	r24, 0x06	; 6
 c7a:	81 60       	ori	r24, 0x01	; 1
 c7c:	86 b9       	out	0x06, r24	; 6
	SET_BIT( ADCSRA , 1 );
 c7e:	86 b1       	in	r24, 0x06	; 6
 c80:	82 60       	ori	r24, 0x02	; 2
 c82:	86 b9       	out	0x06, r24	; 6
	SET_BIT( ADCSRA , 2 );
 c84:	86 b1       	in	r24, 0x06	; 6
 c86:	84 60       	ori	r24, 0x04	; 4
 c88:	86 b9       	out	0x06, r24	; 6
 c8a:	08 95       	ret

00000c8c <ADC_getDigitalValue>:


void ADC_getDigitalValue( u8 channelNum , u16* digitalValue )
{
		
	if ( ( channelNum < 32 ) && ( digitalValue != NULL ) )
 c8c:	80 32       	cpi	r24, 0x20	; 32
 c8e:	b0 f4       	brcc	.+44     	; 0xcbc <ADC_getDigitalValue+0x30>
 c90:	61 15       	cp	r22, r1
 c92:	71 05       	cpc	r23, r1
 c94:	99 f0       	breq	.+38     	; 0xcbc <ADC_getDigitalValue+0x30>
	{
		ADMUX &= (0b11100000);//Clear the 5 bits to avoid error when changing channel number at runtime
 c96:	97 b1       	in	r25, 0x07	; 7
 c98:	90 7e       	andi	r25, 0xE0	; 224
 c9a:	97 b9       	out	0x07, r25	; 7
		ADMUX |= channelNum;//select channel number 
 c9c:	97 b1       	in	r25, 0x07	; 7
 c9e:	89 2b       	or	r24, r25
 ca0:	87 b9       	out	0x07, r24	; 7
		SET_BIT( ADCSRA , 6 );// start conversion 
 ca2:	86 b1       	in	r24, 0x06	; 6
 ca4:	80 64       	ori	r24, 0x40	; 64
 ca6:	86 b9       	out	0x06, r24	; 6
		while( GET_BIT( ADCSRA , 4 ) == 0 );//READ FLAG-> CONVERSION HAS BEEN ENDED WHEN FLAG =1  ( INFINITE LOOP UNTIL THE HARDWARE UPDATES THE FLAG )
 ca8:	34 9b       	sbis	0x06, 4	; 6
 caa:	fe cf       	rjmp	.-4      	; 0xca8 <ADC_getDigitalValue+0x1c>
        SET_BIT( ADCSRA , 4 );// TO CLEAR THE FLAG.....SETTING THE BIT -> THE FLAG WILL BE CLEARED TO AVOID CHANGING FLAG STATUS  	
 cac:	86 b1       	in	r24, 0x06	; 6
 cae:	80 61       	ori	r24, 0x10	; 16
 cb0:	86 b9       	out	0x06, r24	; 6
	    *digitalValue = ADC_u16;//read digital value (all 10 bits ) 
 cb2:	84 b1       	in	r24, 0x04	; 4
 cb4:	95 b1       	in	r25, 0x05	; 5
 cb6:	fb 01       	movw	r30, r22
 cb8:	91 83       	std	Z+1, r25	; 0x01
 cba:	80 83       	st	Z, r24
 cbc:	08 95       	ret

00000cbe <DIO_setPinDirection>:


/* Pin Apis */								   
void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
	if((PortId<=3) && (PinId<=7) && ((PinDirection == DIO_PIN_OUTPUT)||(PinDirection == DIO_PIN_INPUT)))
 cbe:	84 30       	cpi	r24, 0x04	; 4
 cc0:	08 f0       	brcs	.+2      	; 0xcc4 <DIO_setPinDirection+0x6>
 cc2:	72 c0       	rjmp	.+228    	; 0xda8 <DIO_setPinDirection+0xea>
 cc4:	68 30       	cpi	r22, 0x08	; 8
 cc6:	08 f0       	brcs	.+2      	; 0xcca <DIO_setPinDirection+0xc>
 cc8:	6f c0       	rjmp	.+222    	; 0xda8 <DIO_setPinDirection+0xea>
 cca:	42 30       	cpi	r20, 0x02	; 2
 ccc:	08 f0       	brcs	.+2      	; 0xcd0 <DIO_setPinDirection+0x12>
 cce:	6c c0       	rjmp	.+216    	; 0xda8 <DIO_setPinDirection+0xea>
	{
		switch(PortId)
 cd0:	81 30       	cpi	r24, 0x01	; 1
 cd2:	01 f1       	breq	.+64     	; 0xd14 <DIO_setPinDirection+0x56>
 cd4:	30 f0       	brcs	.+12     	; 0xce2 <DIO_setPinDirection+0x24>
 cd6:	82 30       	cpi	r24, 0x02	; 2
 cd8:	b1 f1       	breq	.+108    	; 0xd46 <DIO_setPinDirection+0x88>
 cda:	83 30       	cpi	r24, 0x03	; 3
 cdc:	09 f4       	brne	.+2      	; 0xce0 <DIO_setPinDirection+0x22>
 cde:	4c c0       	rjmp	.+152    	; 0xd78 <DIO_setPinDirection+0xba>
 ce0:	08 95       	ret
	 {
		case DIO_PORTA:
		if (DIO_PIN_OUTPUT == PinDirection)
 ce2:	41 30       	cpi	r20, 0x01	; 1
 ce4:	59 f4       	brne	.+22     	; 0xcfc <DIO_setPinDirection+0x3e>
		{
			SET_BIT(DDRA,PinId);
 ce6:	2a b3       	in	r18, 0x1a	; 26
 ce8:	81 e0       	ldi	r24, 0x01	; 1
 cea:	90 e0       	ldi	r25, 0x00	; 0
 cec:	02 c0       	rjmp	.+4      	; 0xcf2 <DIO_setPinDirection+0x34>
 cee:	88 0f       	add	r24, r24
 cf0:	99 1f       	adc	r25, r25
 cf2:	6a 95       	dec	r22
 cf4:	e2 f7       	brpl	.-8      	; 0xcee <DIO_setPinDirection+0x30>
 cf6:	82 2b       	or	r24, r18
 cf8:	8a bb       	out	0x1a, r24	; 26
 cfa:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,PinId);
 cfc:	2a b3       	in	r18, 0x1a	; 26
 cfe:	81 e0       	ldi	r24, 0x01	; 1
 d00:	90 e0       	ldi	r25, 0x00	; 0
 d02:	02 c0       	rjmp	.+4      	; 0xd08 <DIO_setPinDirection+0x4a>
 d04:	88 0f       	add	r24, r24
 d06:	99 1f       	adc	r25, r25
 d08:	6a 95       	dec	r22
 d0a:	e2 f7       	brpl	.-8      	; 0xd04 <DIO_setPinDirection+0x46>
 d0c:	80 95       	com	r24
 d0e:	82 23       	and	r24, r18
 d10:	8a bb       	out	0x1a, r24	; 26
 d12:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		if (DIO_PIN_OUTPUT == PinDirection)
 d14:	41 30       	cpi	r20, 0x01	; 1
 d16:	59 f4       	brne	.+22     	; 0xd2e <DIO_setPinDirection+0x70>
		{
			SET_BIT(DDRB,PinId);
 d18:	27 b3       	in	r18, 0x17	; 23
 d1a:	81 e0       	ldi	r24, 0x01	; 1
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	02 c0       	rjmp	.+4      	; 0xd24 <DIO_setPinDirection+0x66>
 d20:	88 0f       	add	r24, r24
 d22:	99 1f       	adc	r25, r25
 d24:	6a 95       	dec	r22
 d26:	e2 f7       	brpl	.-8      	; 0xd20 <DIO_setPinDirection+0x62>
 d28:	82 2b       	or	r24, r18
 d2a:	87 bb       	out	0x17, r24	; 23
 d2c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,PinId);
 d2e:	27 b3       	in	r18, 0x17	; 23
 d30:	81 e0       	ldi	r24, 0x01	; 1
 d32:	90 e0       	ldi	r25, 0x00	; 0
 d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_setPinDirection+0x7c>
 d36:	88 0f       	add	r24, r24
 d38:	99 1f       	adc	r25, r25
 d3a:	6a 95       	dec	r22
 d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_setPinDirection+0x78>
 d3e:	80 95       	com	r24
 d40:	82 23       	and	r24, r18
 d42:	87 bb       	out	0x17, r24	; 23
 d44:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		if (DIO_PIN_OUTPUT == PinDirection)
 d46:	41 30       	cpi	r20, 0x01	; 1
 d48:	59 f4       	brne	.+22     	; 0xd60 <DIO_setPinDirection+0xa2>
		{
			SET_BIT(DDRC,PinId);
 d4a:	24 b3       	in	r18, 0x14	; 20
 d4c:	81 e0       	ldi	r24, 0x01	; 1
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	02 c0       	rjmp	.+4      	; 0xd56 <DIO_setPinDirection+0x98>
 d52:	88 0f       	add	r24, r24
 d54:	99 1f       	adc	r25, r25
 d56:	6a 95       	dec	r22
 d58:	e2 f7       	brpl	.-8      	; 0xd52 <DIO_setPinDirection+0x94>
 d5a:	82 2b       	or	r24, r18
 d5c:	84 bb       	out	0x14, r24	; 20
 d5e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,PinId);
 d60:	24 b3       	in	r18, 0x14	; 20
 d62:	81 e0       	ldi	r24, 0x01	; 1
 d64:	90 e0       	ldi	r25, 0x00	; 0
 d66:	02 c0       	rjmp	.+4      	; 0xd6c <DIO_setPinDirection+0xae>
 d68:	88 0f       	add	r24, r24
 d6a:	99 1f       	adc	r25, r25
 d6c:	6a 95       	dec	r22
 d6e:	e2 f7       	brpl	.-8      	; 0xd68 <DIO_setPinDirection+0xaa>
 d70:	80 95       	com	r24
 d72:	82 23       	and	r24, r18
 d74:	84 bb       	out	0x14, r24	; 20
 d76:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		if (DIO_PIN_OUTPUT == PinDirection)
 d78:	41 30       	cpi	r20, 0x01	; 1
 d7a:	59 f4       	brne	.+22     	; 0xd92 <DIO_setPinDirection+0xd4>
		{
			SET_BIT(DDRD,PinId);
 d7c:	21 b3       	in	r18, 0x11	; 17
 d7e:	81 e0       	ldi	r24, 0x01	; 1
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	02 c0       	rjmp	.+4      	; 0xd88 <DIO_setPinDirection+0xca>
 d84:	88 0f       	add	r24, r24
 d86:	99 1f       	adc	r25, r25
 d88:	6a 95       	dec	r22
 d8a:	e2 f7       	brpl	.-8      	; 0xd84 <DIO_setPinDirection+0xc6>
 d8c:	82 2b       	or	r24, r18
 d8e:	81 bb       	out	0x11, r24	; 17
 d90:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,PinId);
 d92:	21 b3       	in	r18, 0x11	; 17
 d94:	81 e0       	ldi	r24, 0x01	; 1
 d96:	90 e0       	ldi	r25, 0x00	; 0
 d98:	02 c0       	rjmp	.+4      	; 0xd9e <DIO_setPinDirection+0xe0>
 d9a:	88 0f       	add	r24, r24
 d9c:	99 1f       	adc	r25, r25
 d9e:	6a 95       	dec	r22
 da0:	e2 f7       	brpl	.-8      	; 0xd9a <DIO_setPinDirection+0xdc>
 da2:	80 95       	com	r24
 da4:	82 23       	and	r24, r18
 da6:	81 bb       	out	0x11, r24	; 17
 da8:	08 95       	ret

00000daa <DIO_setPinValue>:
}


void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
	if((PortId<=3) && (PinId<=7) && ((PinValue == DIO_PIN_HIGH)||(PinValue == DIO_PIN_LOW)))
 daa:	84 30       	cpi	r24, 0x04	; 4
 dac:	08 f0       	brcs	.+2      	; 0xdb0 <DIO_setPinValue+0x6>
 dae:	72 c0       	rjmp	.+228    	; 0xe94 <DIO_setPinValue+0xea>
 db0:	68 30       	cpi	r22, 0x08	; 8
 db2:	08 f0       	brcs	.+2      	; 0xdb6 <DIO_setPinValue+0xc>
 db4:	6f c0       	rjmp	.+222    	; 0xe94 <DIO_setPinValue+0xea>
 db6:	42 30       	cpi	r20, 0x02	; 2
 db8:	08 f0       	brcs	.+2      	; 0xdbc <DIO_setPinValue+0x12>
 dba:	6c c0       	rjmp	.+216    	; 0xe94 <DIO_setPinValue+0xea>
	{
		switch(PortId)
 dbc:	81 30       	cpi	r24, 0x01	; 1
 dbe:	01 f1       	breq	.+64     	; 0xe00 <DIO_setPinValue+0x56>
 dc0:	30 f0       	brcs	.+12     	; 0xdce <DIO_setPinValue+0x24>
 dc2:	82 30       	cpi	r24, 0x02	; 2
 dc4:	b1 f1       	breq	.+108    	; 0xe32 <DIO_setPinValue+0x88>
 dc6:	83 30       	cpi	r24, 0x03	; 3
 dc8:	09 f4       	brne	.+2      	; 0xdcc <DIO_setPinValue+0x22>
 dca:	4c c0       	rjmp	.+152    	; 0xe64 <DIO_setPinValue+0xba>
 dcc:	08 95       	ret
	{
		case DIO_PORTA:
		if (DIO_PIN_HIGH == PinValue)
 dce:	41 30       	cpi	r20, 0x01	; 1
 dd0:	59 f4       	brne	.+22     	; 0xde8 <DIO_setPinValue+0x3e>
		{
			SET_BIT(PORTA,PinId);
 dd2:	2b b3       	in	r18, 0x1b	; 27
 dd4:	81 e0       	ldi	r24, 0x01	; 1
 dd6:	90 e0       	ldi	r25, 0x00	; 0
 dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_setPinValue+0x34>
 dda:	88 0f       	add	r24, r24
 ddc:	99 1f       	adc	r25, r25
 dde:	6a 95       	dec	r22
 de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_setPinValue+0x30>
 de2:	82 2b       	or	r24, r18
 de4:	8b bb       	out	0x1b, r24	; 27
 de6:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,PinId);
 de8:	2b b3       	in	r18, 0x1b	; 27
 dea:	81 e0       	ldi	r24, 0x01	; 1
 dec:	90 e0       	ldi	r25, 0x00	; 0
 dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_setPinValue+0x4a>
 df0:	88 0f       	add	r24, r24
 df2:	99 1f       	adc	r25, r25
 df4:	6a 95       	dec	r22
 df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_setPinValue+0x46>
 df8:	80 95       	com	r24
 dfa:	82 23       	and	r24, r18
 dfc:	8b bb       	out	0x1b, r24	; 27
 dfe:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		if (DIO_PIN_HIGH == PinValue)
 e00:	41 30       	cpi	r20, 0x01	; 1
 e02:	59 f4       	brne	.+22     	; 0xe1a <DIO_setPinValue+0x70>
		{
			SET_BIT(PORTB,PinId);
 e04:	28 b3       	in	r18, 0x18	; 24
 e06:	81 e0       	ldi	r24, 0x01	; 1
 e08:	90 e0       	ldi	r25, 0x00	; 0
 e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_setPinValue+0x66>
 e0c:	88 0f       	add	r24, r24
 e0e:	99 1f       	adc	r25, r25
 e10:	6a 95       	dec	r22
 e12:	e2 f7       	brpl	.-8      	; 0xe0c <DIO_setPinValue+0x62>
 e14:	82 2b       	or	r24, r18
 e16:	88 bb       	out	0x18, r24	; 24
 e18:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,PinId);
 e1a:	28 b3       	in	r18, 0x18	; 24
 e1c:	81 e0       	ldi	r24, 0x01	; 1
 e1e:	90 e0       	ldi	r25, 0x00	; 0
 e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_setPinValue+0x7c>
 e22:	88 0f       	add	r24, r24
 e24:	99 1f       	adc	r25, r25
 e26:	6a 95       	dec	r22
 e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_setPinValue+0x78>
 e2a:	80 95       	com	r24
 e2c:	82 23       	and	r24, r18
 e2e:	88 bb       	out	0x18, r24	; 24
 e30:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		if (DIO_PIN_HIGH == PinValue)
 e32:	41 30       	cpi	r20, 0x01	; 1
 e34:	59 f4       	brne	.+22     	; 0xe4c <DIO_setPinValue+0xa2>
		{
			SET_BIT(PORTC,PinId);
 e36:	25 b3       	in	r18, 0x15	; 21
 e38:	81 e0       	ldi	r24, 0x01	; 1
 e3a:	90 e0       	ldi	r25, 0x00	; 0
 e3c:	02 c0       	rjmp	.+4      	; 0xe42 <DIO_setPinValue+0x98>
 e3e:	88 0f       	add	r24, r24
 e40:	99 1f       	adc	r25, r25
 e42:	6a 95       	dec	r22
 e44:	e2 f7       	brpl	.-8      	; 0xe3e <DIO_setPinValue+0x94>
 e46:	82 2b       	or	r24, r18
 e48:	85 bb       	out	0x15, r24	; 21
 e4a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,PinId);
 e4c:	25 b3       	in	r18, 0x15	; 21
 e4e:	81 e0       	ldi	r24, 0x01	; 1
 e50:	90 e0       	ldi	r25, 0x00	; 0
 e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_setPinValue+0xae>
 e54:	88 0f       	add	r24, r24
 e56:	99 1f       	adc	r25, r25
 e58:	6a 95       	dec	r22
 e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_setPinValue+0xaa>
 e5c:	80 95       	com	r24
 e5e:	82 23       	and	r24, r18
 e60:	85 bb       	out	0x15, r24	; 21
 e62:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		if (DIO_PIN_HIGH == PinValue)
 e64:	41 30       	cpi	r20, 0x01	; 1
 e66:	59 f4       	brne	.+22     	; 0xe7e <DIO_setPinValue+0xd4>
		{
			SET_BIT(PORTD,PinId);
 e68:	22 b3       	in	r18, 0x12	; 18
 e6a:	81 e0       	ldi	r24, 0x01	; 1
 e6c:	90 e0       	ldi	r25, 0x00	; 0
 e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_setPinValue+0xca>
 e70:	88 0f       	add	r24, r24
 e72:	99 1f       	adc	r25, r25
 e74:	6a 95       	dec	r22
 e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_setPinValue+0xc6>
 e78:	82 2b       	or	r24, r18
 e7a:	82 bb       	out	0x12, r24	; 18
 e7c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,PinId);
 e7e:	22 b3       	in	r18, 0x12	; 18
 e80:	81 e0       	ldi	r24, 0x01	; 1
 e82:	90 e0       	ldi	r25, 0x00	; 0
 e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_setPinValue+0xe0>
 e86:	88 0f       	add	r24, r24
 e88:	99 1f       	adc	r25, r25
 e8a:	6a 95       	dec	r22
 e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_setPinValue+0xdc>
 e8e:	80 95       	com	r24
 e90:	82 23       	and	r24, r18
 e92:	82 bb       	out	0x12, r24	; 18
 e94:	08 95       	ret

00000e96 <EEPROM_Write_Byte>:


void EEPROM_Write_Byte(u8 address,u8 value)
{
	
	while( GET_BIT(EECR,1)==1 );  /* POLLING WITH BLOCKING to wait until the EEWE is cleared */
 e96:	e1 99       	sbic	0x1c, 1	; 28
 e98:	fe cf       	rjmp	.-4      	; 0xe96 <EEPROM_Write_Byte>
	
	EEAR_u16 = address;
 e9a:	90 e0       	ldi	r25, 0x00	; 0
 e9c:	9f bb       	out	0x1f, r25	; 31
 e9e:	8e bb       	out	0x1e, r24	; 30
	//EECR |= (1<<EERE);
	
	
	EEDR = value;
 ea0:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(EECR,2);						//EECR |= (1<<EEMWE);
 ea2:	8c b3       	in	r24, 0x1c	; 28
 ea4:	84 60       	ori	r24, 0x04	; 4
 ea6:	8c bb       	out	0x1c, r24	; 28
	SET_BIT(EECR,1);						//EECR |= (1<<EEWE);
 ea8:	8c b3       	in	r24, 0x1c	; 28
 eaa:	82 60       	ori	r24, 0x02	; 2
 eac:	8c bb       	out	0x1c, r24	; 28
 eae:	08 95       	ret

00000eb0 <EEPROM_Read_Byte>:
}

u8 EEPROM_Read_Byte(u8 address)
{
	
	while( GET_BIT(EECR,1)==1 );
 eb0:	e1 99       	sbic	0x1c, 1	; 28
 eb2:	fe cf       	rjmp	.-4      	; 0xeb0 <EEPROM_Read_Byte>
	

	EEAR_u16 = address;
 eb4:	90 e0       	ldi	r25, 0x00	; 0
 eb6:	9f bb       	out	0x1f, r25	; 31
 eb8:	8e bb       	out	0x1e, r24	; 30

	SET_BIT(EECR,0);							//EECR |= (1<<EERE);
 eba:	8c b3       	in	r24, 0x1c	; 28
 ebc:	81 60       	ori	r24, 0x01	; 1
 ebe:	8c bb       	out	0x1c, r24	; 28
	

	return EEDR;
 ec0:	8d b3       	in	r24, 0x1d	; 29
	
	
 ec2:	08 95       	ret

00000ec4 <__umulhisi3>:
 ec4:	a2 9f       	mul	r26, r18
 ec6:	b0 01       	movw	r22, r0
 ec8:	b3 9f       	mul	r27, r19
 eca:	c0 01       	movw	r24, r0
 ecc:	a3 9f       	mul	r26, r19
 ece:	70 0d       	add	r23, r0
 ed0:	81 1d       	adc	r24, r1
 ed2:	11 24       	eor	r1, r1
 ed4:	91 1d       	adc	r25, r1
 ed6:	b2 9f       	mul	r27, r18
 ed8:	70 0d       	add	r23, r0
 eda:	81 1d       	adc	r24, r1
 edc:	11 24       	eor	r1, r1
 ede:	91 1d       	adc	r25, r1
 ee0:	08 95       	ret

00000ee2 <_exit>:
 ee2:	f8 94       	cli

00000ee4 <__stop_program>:
 ee4:	ff cf       	rjmp	.-2      	; 0xee4 <__stop_program>
